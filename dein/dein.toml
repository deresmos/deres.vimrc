# git plugins {{{1
# rhysd/committia.vim {{{2
[[plugins]]
repo = 'rhysd/committia.vim'
hook_add = '''
  let g:committia_open_only_vim_starting = 1
  let g:committia_hooks = {}
  function! g:committia_hooks.edit_open(info) abort
    nmap <buffer><C-j> <Plug>(committia-scroll-diff-down-half)
    nmap <buffer><C-k> <Plug>(committia-scroll-diff-up-half)
  endfunction
'''

# tpope/vim-fugitive {{{2
[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  augroup fugitive-keymap
    autocmd!
    autocmd FileType gitcommit nmap <buffer> <SPACE>gj <C-n>
    autocmd FileType gitcommit nmap <buffer> <SPACE>gk <C-p>
  augroup END

  function! FugitiveCommitError(error, tmpfile)
    if a:error =~? 'pre-commit'
      call s:applyQflist(a:tmpfile)
    endif
  endfunction

  function! s:applyQflist(tmpfile)
    let errors = []
    let contents = readfile(a:tmpfile)

    let filepath = ''
    for content in contents
      if empty(content)
        continue
      endif

      if content =~? '^/' && filereadable(content)
        let filepath = content
        continue
      endif

      if content =~? '\v\s*[0-9]+:[0-9]+'
        let csp = split(content)
        call add(errors, filepath . ':' . csp[0] . ':' . join(csp[2:-2], ' ') . '. [' . csp[-1] . ']')
      endif
    endfor

    setlocal errorformat=%f:%l:%c:%m
    cgetexpr join(errors, "\n")
    q
    copen
  endfunction
'''

# airblade/vim-gitgutter {{{2
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  let g:gitgutter_sign_added            = '+'
  let g:gitgutter_sign_modified         = '~'
  let g:gitgutter_sign_removed          = '__'
  let g:gitgutter_sign_modified_removed = '~_'
  let g:gitgutter_map_keys              = 0
  let g:gitgutter_enabled               = 1
  let g:gitgutter_signs                 = 1
  let g:gitgutter_highlight_lines       = 0
  let g:gitgutter_async                 = 1
  let g:gitgutter_max_signs             = 1000

  set signcolumn=yes

  nnoremap <SPACE>gob :<C-u>let g:gitgutter_diff_base =<space>
  nnoremap <silent><SPACE>goB :<C-u>let g:gitgutter_diff_base = ''<CR>

  augroup gitgutter-highlight-custom
    autocmd!
    autocmd ColorScheme * highlight GitGutterAdd    ctermfg=2 ctermbg=2
    autocmd ColorScheme * highlight GitGutterDelete ctermfg=1 ctermbg=235
    autocmd ColorScheme * highlight GitGutterChange ctermfg=4 ctermbg=4
  augroup END

  augroup gitgutter-custom
    autocmd!
    autocmd TextChanged,InsertLeave,WinEnter * GitGutter
    autocmd FileType nvim-term*,nerdtree,tagbar setlocal signcolumn=no
  augroup END
'''

# rickhowe/diffchar.vim {{{2
[[plugins]]
repo = 'rickhowe/diffchar.vim'
hook_add = '''
  let g:DiffUpdate      = 0
  let g:DiffPairVisible = 0
'''

# lambdalisue/gina.vim {{{2
[[plugins]]
repo = 'lambdalisue/gina.vim'

#}}}1 END git plugins

# operator plugins {{{1
# kana/vim-operator-user {{{2
[[plugins]]
repo = 'kana/vim-operator-user'
hook_add = '''
  nmap R <Nop>
  nmap R <Plug>(operator-replace)
  xmap R <Nop>
  xmap R <Plug>(operator-replace)
  nmap s <Nop>
  xmap s <Nop>

  nmap <silent>sa <Plug>(operator-surround-append)
  nmap <silent>sd <Plug>(operator-surround-delete)
  nmap <silent>sr <Plug>(operator-surround-replace)
  nmap <silent>sc <Plug>(operator-camelize)gv
  nmap <silent>sC <Plug>(operator-decamelize)gv
  nmap <silent>se <Plug>(operator-html-escape)
  nmap <silent>sE <Plug>(operator-html-unescape)

  xmap <silent>sa <Plug>(operator-surround-append)
  xmap <silent>sd <Plug>(operator-surround-delete)
  xmap <silent>sr <Plug>(operator-surround-replace)
  xmap <silent>sc <Plug>(operator-camelize)gv
  xmap <silent>sC <Plug>(operator-decamelize)gv
  xmap <silent>se <Plug>(operator-html-escape)
  xmap <silent>sE <Plug>(operator-html-unescape)

  let g:operator#surround#blocks = {
    \ '-' : [
    \ {'block' : ['(', ')'],
    \ 'motionwise' : ['char', 'line', 'block'], 'keys' : ['b'] },
    \ {'block' : ['{', '}'],
    \ 'motionwise' : ['char', 'line', 'block'], 'keys' : ['B'] },
    \ {'block' : ["'", "'"],
    \ 'motionwise' : ['char', 'line', 'block'], 'keys' : ['s'] },
    \ {'block' : ['"', '"'],
    \ 'motionwise' : ['char', 'line', 'block'], 'keys' : ['d'] }
    \ ]}
'''

# kana/vim-operator-replace {{{2
[[plugins]]
repo = 'kana/vim-operator-replace'

# rhysd/vim-operator-surround {{{2
[[plugins]]
repo = 'rhysd/vim-operator-surround'

# tyru/operator-camelize.vim {{{2
[[plugins]]
repo = 'tyru/operator-camelize.vim'

# sgur/vim-textobj-parameter {{{2
[[plugins]]
repo = 'sgur/vim-textobj-parameter'
hook_add = '''
  let g:vim_textobj_parameter_mapping = 'a'
'''

# kana/vim-textobj-entire {{{2
[[plugins]]
repo = 'kana/vim-textobj-entire'

# tyru/operator-html-escape.vim {{{2
[[plugins]]
repo = 'tyru/operator-html-escape.vim'

# t9md/vim-textmanip {{{2
[[plugins]]
repo = 't9md/vim-textmanip'
hook_add = '''
  xmap <Space>d <Plug>(textmanip-duplicate-down)
  xmap <Space>D <Plug>(textmanip-duplicate-up)

  xmap <C-j> <Plug>(textmanip-move-down)
  xmap <C-k> <Plug>(textmanip-move-up)
  xmap <C-h> <Plug>(textmanip-move-left)
  xmap <C-l> <Plug>(textmanip-move-right)
'''

# kana/vim-textobj-user {{{2
[[plugins]]
repo = 'kana/vim-textobj-user'
hook_add = '''
  omap al <Plug>(textobj-indent-a)
  xmap al <Plug>(textobj-indent-a)
  omap il <Plug>(textobj-indent-i)
  xmap il <Plug>(textobj-indent-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-indent'

[[plugins]]
repo = 'thinca/vim-textobj-between'

# bronson/vim-visual-star-search {{{2
[[plugins]]
repo = 'bronson/vim-visual-star-search'

# itchyny/vim-cursorword {{{2
[[plugins]]
repo = 'itchyny/vim-cursorword'

# }}}1 END oparator plugins

# plugins {{{1
# Shougo/dein.vim {{{2
[[plugins]]
repo = 'Shougo/dein.vim'

# deresmos/nvim-term {{{2
[[plugins]]
repo = 'deresmos/nvim-term'
hook_add = '''
  let g:nvimterm#enter_insert = 0
'''

# w0ng/vim-hybrid {{{2
[[plugins]]
repo = 'w0ng/vim-hybrid'

# kana/vim-submode {{{2
[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
  call submode#enter_with('windowmove', 'n', '', '<SPACE>ww', '<Nop>')
  call submode#map('windowmove', 'n', '', 'j', '<C-w>j')
  call submode#map('windowmove', 'n', '', 'k', '<C-w>k')
  call submode#map('windowmove', 'n', '', 'l', '<C-w>l')
  call submode#map('windowmove', 'n', '', 'h', '<C-w>h')
  call submode#map('windowmove', 'n', '', 'J', '<C-w>J')
  call submode#map('windowmove', 'n', '', 'K', '<C-w>K')
  call submode#map('windowmove', 'n', '', 'L', '<C-w>L')
  call submode#map('windowmove', 'n', '', 'H', '<C-w>H')

  call submode#enter_with('bufmove', 'n', '', '<SPACE>wr', '<Nop>')
  call submode#map('bufmove', 'n', '', 'l', '<C-w>>')
  call submode#map('bufmove', 'n', '', 'h', '<C-w><')
  call submode#map('bufmove', 'n', '', 'j', '<C-w>+')
  call submode#map('bufmove', 'n', '', 'k', '<C-w>-')

  call submode#enter_with('tabmove', 'n', '', '<SPACE>tt', '<Nop>')
  call submode#map('tabmove', 'n', '', 'l', ':tabnext<CR>')
  call submode#map('tabmove', 'n', '', 'h', ':tabprevious<CR>')
  call submode#map('tabmove', 'n', '', 'L', ':+tabmove<CR>')
  call submode#map('tabmove', 'n', '', 'H', ':-tabmove<CR>')
'''

# vim-scripts/L9 {{{2
[[plugins]]
repo = 'vim-scripts/L9'

# mhinz/vim-startify {{{2
[[plugins]]
repo = 'mhinz/vim-startify'
hook_add = '''
let g:startify_files_number = 10
let g:startify_custom_indices = ['a', 'b', 'c', 'd', 'f', 'g', 'i', 'm',
  \ 'n', 'o', 'p', 'r', 's', 't', 'u', 'v', 'w', 'x', 'z']
let g:startify_list_order = [
  \ ['Bookmarks:'],
  \ 'bookmarks',
  \ ['Recentry open files:'],
  \ 'files',
  \ ['Recentry open files in dir:'],
  \ 'dir',
  \ ]

let g:startify_session_sort = 0

let g:startify_session_before_save = [
  \ 'echo "Cleaning up before saving..."',
  \ 'silent! NERDTreeClose',
  \ 'silent! bd __XtermColorTable__',
  \ ]

let g:startify_custom_header = [
\"        _                                   _            ",
\"     __| |  ___  _ __   ___  ___    __   __(_) _ __ ___  ",
\"    / _` | / _ \\| '__| / _ \\/ __|   \\ \\ / /| || '_ ` _ \\ ",
\"   | (_| ||  __/| |   |  __/\\__ \\ _  \\ V / | || | | | | |",
\"    \\__,_| \\___||_|    \\___||___/(_)  \\_/  |_||_| |_| |_|",
\ ]
let g:startify_change_to_dir = 1
'''

# LeafCage/foldCC.vim {{{2
[[plugins]]
repo = 'LeafCage/foldCC.vim'
hook_add = '''
  let g:foldCCtext_maxchars = 79
  let g:foldCCtext_head     = 'v:folddashes . " "'
  let g:foldCCtext_tail     = 'printf(" %s [ %4d lines ]",
    \ v:folddashes, v:foldend-v:foldstart+1)'
  let g:foldCCnavi_maxchars = 60
'''

# itchyny/lightline.vim {{{2
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let s:small_width = 50
  let s:medium_width = 70
  let s:large_width = 100

  let g:lightline = {}
  let g:lightline = {
    \ 'colorscheme': 'wombat',
    \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
    \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" },
    \ 'mode_map': {'c': 'NORMAL'},
    \ 'active': {
    \   'left': [
    \     ['mode', 'paste', 'readonly'],
    \     ['branchname', 'gitgutter'],
    \     ['currenttag', 'vista'],
    \   ],
    \   'right': [
    \     ['lineinfo'],
    \     ['fileindent', 'charcode', 'fileformat', 'fileencoding', 'filetype'],
    \     ['ale'],
    \   ]
    \ },
    \ 'inactive': {
    \   'left': [
    \     [''],
    \     ['filename'],
    \   ],
    \   'right': [
    \     [''],
    \     ['number', ''],
    \   ]
    \ },
    \ 'tabline': {
    \   'left': [
    \     ['tabs'],
    \   ],
    \   'right': [
    \     ['filename'],
    \     ['number', 'maxline'],
    \   ]
    \ },
    \ 'component_function': {
    \   'modified': 'MyModified',
    \   'branchname': 'gina#component#repo#branch',
    \   'filename': 'MyFilename',
    \   'filenamefull': 'MyFilenameFull',
    \   'lineinfo': 'MyLineInfo',
    \   'fileindent': 'MyFileIndent',
    \   'maxline': 'MaxLine',
    \   'fileformat': 'MyFileformat',
    \   'filetype': 'MyFiletype',
    \   'fileencoding': 'MyFileencoding',
    \   'mode': 'MyMode',
    \   'gitgutter': 'MyGitGutter',
    \   'ale': 'AleStatus',
    \   'currenttag': 'MyCurrentTag',
    \   'vista': 'NearestMethodOrFunction',
    \ },
    \ 'component_expand': {
    \   'readonly': 'MyReadonly',
    \   'tabs': 'lightline#tabs',
    \ },
    \ 'component_type': {
    \   'readonly': 'error',
    \   'tabs': 'tabsel',
    \ },
    \ 'component': {
    \   'number': 'w%{winnr()}:b%n',
    \ },
    \ 'tab_component_function': {
    \   'tabfilename_active':   'MyTabFilenameActive',
    \   'tabfilename_inactive': 'MyTabFilenameInactive',
    \   'tabmodified':          'MyTabModified',
    \ },
    \ 'tab': {
    \   'active':   ['tabfilename_active',   'tabmodified'],
    \   'inactive': ['tabfilename_inactive', 'modified'],
    \ },
  \ }

  function! NearestMethodOrFunction() abort
    return get(b:, 'vista_nearest_method_or_function', '')
  endfunction

  function! s:MyTabFilename(n, length) abort
    let l:buflist = tabpagebuflist(a:n)
    let l:winnr = tabpagewinnr(a:n)
    let l:filename = expand('#' . l:buflist[l:winnr - 1] . ':t')
    return l:filename !=# '' ? l:filename[0:a:length] : '[No Name]'
  endfunction

  function! MyTabFilenameActive(n) abort
    return a:n
  endfunction

  function! MyTabFilenameInactive(n) abort
    return a:n
  endfunction

  let s:p = g:lightline#colorscheme#wombat#palette
  let s:tabsel = [['#d0d0d0', '#242424', 252, 235]]
  let s:p.normal.right = [['#444444 ', '#8ac6f2', 238, 117], ['#d0d0d0', '#585858', 252, 240]]
  let s:p.insert.right = [['#444444 ', '#95e454', 238, 119], ['#d0d0d0', '#585858', 252, 240]]
  let s:p.visual.right = [['#444444 ', '#f2c68a', 238, 216], ['#d0d0d0', '#585858', 252, 240]]
  let s:p.tabline.right = [['#d0d0d0', '#585858', 252, 240]]
  let s:p.tabline.left = [['#767676', '#242424', 243, 235]]
  let s:p.tabline.tabsel = s:tabsel
  let g:lightline#colorscheme#wombat#palette = s:p

  function! MaxLine() abort
    return 'L:' . line('$')
  endfunction

  function! MyTabModified(n) abort
    let s:p = g:lightline#colorscheme#wombat#palette
    let s:p.tabline.tabsel = &modified ? [['#5fff00', '#242424', 82, 235]] : s:tabsel
    let g:lightline#colorscheme#wombat#palette = s:p

    call lightline#colorscheme()

    return ''
  endfunction

  function! MyLineInfo() abort
    return 'L' . line('.') . ':R' . printf('%03d', virtcol('$'))
  endfunction

  function! MyModified() abort
    return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfunction

  function! MyReadonly() abort
    return &readonly ? 'Readonly' : ''
  endfunction

  function! MyFilename() abort
    let filename = (expand('%:p') == '') ? '[No Name]' : expand('%:p')
    let filename = substitute(filename, expand('$HOME'), '~', 'g')
    if strlen(filename) > winwidth(0) * 0.75
      let filename = expand('%:t')
    endif

    return filename
  endfunction

  function! MyFilenameFull() abort
    return '' != expand('%:p') ? expand('%:p') : '[No Name]'
  endfunction

  function! MyCurrentTag() abort
    if !exists('*tagbar#currenttag')
      return ''
    endif

    let l:_ = winwidth(0) > s:large_width ? tagbar#currenttag('%s', '') : ''
    let l:_ = l:_[:40]
    return l:_
  endfunction

  function! MyGitGutter() abort
    if ! exists('*GitGutterGetHunkSummary')
      \ || ! get(g:, 'gitgutter_enabled', 0)
      \ || winwidth(0) <= s:medium_width
    endif

    let symbols = ['+','~', '-']
    let hunks = GitGutterGetHunkSummary()
    let ret = []
    for i in [0, 1, 2]
      if hunks[i] > 0
        call add(ret, symbols[i] . hunks[i])
      endif
    endfor

    return join(ret, ' ')
  endfunction

  function! MyFileIndent() abort
    return winwidth(0) > s:small_width ? spatab#GetDetectName() : ''
  endfunction

  function! MyFileformat() abort
    return winwidth(0) > s:small_width ? &fileformat : ''
  endfunction

  function! MyFiletype() abort
    return winwidth(0) > s:medium_width ? (strlen(&filetype) ? &filetype : 'no ft') : ''
  endfunction

  function! MyFileencoding() abort
    return winwidth(0) > s:small_width ? (strlen(&fenc) ? &fenc : &enc) : ''
  endfunction

  function! MyMode() abort
    return lightline#mode()
  endfunction
'''

# scrooloose/nerdcommenter {{{2
[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
  let g:NERDCommentEmptyLines      = 1
  let g:NERDTrimTrailingWhitespace = 1
  let g:NERDSpaceDelims            = 1
  let g:NERDCompactSexyComs        = 1
  let g:NERDDefaultAlign           = 'left'

  let g:NERDCustomDelimiters = {
      \ 'wsh': { 'left': "'" },
  \ }
'''

# mhinz/neovim-remote {{{2
[[plugins]]
repo = 'mhinz/neovim-remote'

# tpope/vim-repeat {{{2
[[plugins]]
repo = 'tpope/vim-repeat'

# mattn/webapi-vim {{{2
[[plugins]]
repo = 'mattn/webapi-vim'

# adelarsq/vim-matchit {{{2
[[plugins]]
repo = 'adelarsq/vim-matchit'
hook_add = '''
  augroup matchit-settings
    autocmd!
    autocmd FileType wsh,vb,aspvbs let b:match_words="\\<function\\>:\\<end function\\>,\\<sub\\>:\\<end sub\\>,\\<with\\>:\\<end with\\>,\\<while\\>:\\<wend\\>,\\<for\\>:\\<next\\>,\\<on error resume next\\>:\\<on error\\>,\\<if\\>:\\<end if\\>"
  augroup END
'''

# machakann/vim-highlightedyank {{{2
[[plugins]]
repo = 'machakann/vim-highlightedyank'
hook_add = '''
  let g:highlightedyank_highlight_duration = 500

  augroup HighlightedYankColorScheme
    autocmd!
    autocmd ColorScheme * highlight HighlightedyankRegion ctermfg=none ctermbg=237 cterm=bold
  augroup END
'''

# deresmos/vim-spatab {{{2
[[plugins]]
repo = 'deresmos/vim-spatab'
hook_add = '''
  let g:spatab_count_mode = 1

  augroup vim-spatab
    autocmd!
    autocmd BufReadPost * STDetect
  augroup END
'''

# andreshazard/vim-logreview {{{2
[[plugins]]
repo = 'andreshazard/vim-logreview'

# Shougo/context_filetype.vim {{{2
[[plugins]]
repo = 'Shougo/context_filetype.vim'

# sheerun/vim-polyglot {{{2
[[plugins]]
repo = 'sheerun/vim-polyglot'
build = './build'
hook_add = '''
  augroup my-pug-augroup
    autocmd!
    " autocmd FileType pug setlocal syntax=css
  augroup END
'''

# Shougo/neomru.vim {{{2
[[plugins]]
repo = 'Shougo/neomru.vim'

# Shougo/neoyank.vim {{{2
[[plugins]]
repo = 'Shougo/neoyank.vim'
#}}}1 END plugins

# Programing plugins {{{1
# deresmos/vim-snippets {{{2
[[plugins]]
repo = 'deresmos/vim-snippets'

# w0rp/ale {{{2
[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  nnoremap <silent> <SPACE>af :<C-u>silent! ALEFix<CR>
  augroup custom-ale
    autocmd!
    autocmd FileType python let b:ale_fix_on_save = 1
  augroup END

  let g:ale_sign_column_always   = 1
  let g:ale_lint_on_insert_leave = 1
  let g:ale_lint_on_text_changed = 'normal'
  let g:ale_enabled              = 0
  let g:ale_virtualtext_cursor   = 1
  let g:ale_virtualtext_prefix   = ' >> '

  let g:ale_sign_error           = '>>'
  let g:ale_sign_warning         = '>>'
  let g:ale_echo_msg_error_str   = 'E'
  let g:ale_echo_msg_warning_str = 'W'

  let g:ale_echo_msg_format   = '%s [%severity%] | %linter%'

  function! AleStatus()
    if !get(b:, 'ale_enabled', 0) && !g:ale_enabled
      return ''
    endif

    let counts = ale#statusline#Count(bufnr(''))

    if !counts['total']
      return 'OK'
    endif

    return printf('E%d W%d', counts[0], counts[1])
  endfunction

  let g:ale_linters = {
    \ 'python': ['flake8', 'mypy', 'bandit'],
    \ 'javascript': ['eslint'],
    \ 'php': ['phpcs'],
    \ 'css': ['stylelint'],
    \ 'xhtml': ['tidy'],
    \ 'cs': ['OmniSharp'],
    \ }

  let g:ale_type_map = {'flake8': {'ES': 'WS'}}
  let g:ale_css_stylelint_options='-c stylelint'
  let g:ale_python_mypy_options='--ignore-missing-imports'

  let g:ale_html_tidy_options='-config ~/.tidy_linter -e'
  let g:ale_php_phpcs_standard='PSR2'
  let g:ale_linter_aliases = {'xhtml': 'html'}

  let g:ale_fixers = {
    \ 'html': [
    \   {buffer, lines -> {
    \   'command': 'tidy -config ~/.tidy_fix %s'}}
    \ ],
    \ 'xhtml': [
    \   {buffer, lines -> {
    \   'command': 'tidy -config ~/.tidy_fix %s'}}
    \ ],
    \ 'javascript': [
    \   {buffer, lines -> {
    \   'command': 'eslint --config ~/.eslintrc.js --fix %t',
    \   'read_temporary_file': 1}}
    \ ],
    \ 'css': [
    \   {buffer, lines -> {
    \   'command': 'stylelint -c stylelint --fix %t',
    \   'read_temporary_file': 1}},
    \   {buffer, lines -> {
    \   'command': 'csscomb -c ~/.csscomb.json %s'}}
    \ ],
    \ 'php': [
    \   {buffer, lines -> {
    \   'command': 'phpcbf --standard=PSR2 %t',
    \   'read_temporary_file': 1}}
    \ ],
    \ 'python': [
    \   'isort',
    \   {buffer, lines -> {
    \   'command': 'yapf -i --style pep8 %t',
    \   'read_temporary_file': 1}}
    \ ],
    \ 'markdown': [
    \   {buffer, lines -> {
    \   'command': 'textlint -c ~/.config/textlintrc -o /dev/null --fix --no-color --quiet %t',
    \   'read_temporary_file': 1}}
    \ ],
    \ 'sql': [
    \   {buffer, lines -> {
    \   'command': 'sqlformat --reindent --keywords upper -s %t | sql-formatter-cli -o %t',
    \   'read_temporary_file': 1}}
    \ ],
    \ }
  " let g:ale_fix_on_save = 1

  highlight link ALEWarningSign SpellCap
'''

# thinca/vim-quickrun {{{2
[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  let g:quickrun_config={'_': {'split': ''}}
  let g:quickrun_config._={
    \ 'hook/time/enable': '1',
    \ 'runner'    : 'vimproc',
    \ 'runner/vimproc/updatetime' : 60,
    \ 'outputter' : 'error',
    \ 'outputter/error/success' : 'buffer',
    \ 'outputter/error/error'   : 'quickfix',
    \ 'outputter/buffer/split'  : ':botright 6sp',
    \ 'outputter/buffer/close_on_empty' : 1,
    \ 'outputter/buffer/running_mark': ''
  \ }

  let g:quickrun_config['python'] = {
    \ 'type'    : 'python',
    \ 'command' : 'python',
    \ 'cmdopt'    : '-u',
  \}
'''

# }}}1
