# git plugins {{{1
# idanarye/vim-merginal {{{2
[[plugins]]
repo = 'idanarye/vim-merginal'

# tpope/vim-fugitive {{{2
[[plugins]]
repo = 'tpope/vim-fugitive'
rev = 'db3b837'
hook_add = '''
  augroup fugitive-keymap
    autocmd!
    autocmd FileType gitcommit nmap <buffer> <SPACE>gj <C-n>
    autocmd FileType gitcommit nmap <buffer> <SPACE>gk <C-p>
  augroup END

  function! FugitiveCommitError(error, tmpfile)
    if a:error =~? 'pre-commit'
      call s:applyQflist(a:tmpfile)
    endif
  endfunction

  function! s:applyQflist(tmpfile)
    let errors = []
    let contents = readfile(a:tmpfile)

    let filepath = ''
    for content in contents
      if empty(content)
        continue
      endif

      if content =~? '^/' && filereadable(content)
        let filepath = content
        continue
      endif

      if content =~? '\v\s*[0-9]+:[0-9]+'
        let csp = split(content)
        call add(errors, filepath . ':' . csp[0] . ':' . join(csp[2:-2], ' ') . '. [' . csp[-1] . ']')
      endif
    endfor

    setlocal errorformat=%f:%l:%c:%m
    cgetexpr join(errors, "\n")
    q
    copen
  endfunction
'''

# deresmos/agit.vim {{{2
[[plugins]]
repo = 'deresmos/agit.vim'
hook_add = '''
  augroup agit-keymap
    autocmd!
    autocmd FileType agit nmap <buffer> rv <Plug>(agit-git-revert)
    autocmd FileType agit nmap <buffer> cp <Plug>(agit-git-cherry-pick)
    autocmd FileType agit nnoremap <buffer><silent> ch
      \ :let g:gitgutter_diff_base = agit#extract_hash(getline('.'))<CR>
      \ :echo 'Switched gitgutter hash'<CR>
  augroup END

  let g:agit_max_log_lines = 200
  let g:agit_ignore_spaces = 0

  let g:agit_preset_views = {
    \ 'default': [
    \   {'name': 'log'},
    \   {'name': 'stat',
    \    'layout': 'botright vnew'},
    \   {'name': 'diff',
    \    'layout': 'belowright {winheight(".") * 3 / 4}new'}
    \ ],
    \ 'file': [
    \   {'name': 'filelog'},
    \   {'name': 'stat',
    \    'layout': 'botright vnew'},
    \   {'name': 'filediff',
    \    'layout': 'belowright {winheight(".") * 3 / 4}new'}
    \ ]}

  let g:agit_diff_stat_cp932_pattern = [
    \ 'B_dev/',
    \ 'toB/'
    \ ]
'''

# airblade/vim-gitgutter {{{2
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  let g:gitgutter_sign_added            = '+'
  let g:gitgutter_sign_modified         = '~'
  let g:gitgutter_sign_removed          = '__'
  let g:gitgutter_sign_modified_removed = '~_'
  let g:gitgutter_map_keys              = 0
  let g:gitgutter_enabled               = 1
  let g:gitgutter_signs                 = 1
  let g:gitgutter_highlight_lines       = 0
  let g:gitgutter_async                 = 1

  set signcolumn=yes

  nnoremap <SPACE>gob :<C-u>let g:gitgutter_diff_base =<space>
  nnoremap <silent><SPACE>goB :<C-u>let g:gitgutter_diff_base = ''<CR>

  augroup gitgutter-highlight-custom
    autocmd!
    autocmd ColorScheme * highlight GitGutterAdd    ctermfg=2 ctermbg=2
    autocmd ColorScheme * highlight GitGutterDelete ctermfg=1 ctermbg=235
    autocmd ColorScheme * highlight GitGutterChange ctermfg=1 ctermbg=4
  augroup END

  augroup gitgutter-custom
    autocmd!
    autocmd TextChanged,InsertLeave,WinEnter * GitGutter
    autocmd FileType nvim-term*,nerdtree,tagbar setlocal signcolumn=no
  augroup END
'''

# rhysd/committia.vim {{{2
[[plugins]]
repo = 'rhysd/committia.vim'
hook_add = '''
  let g:committia_open_only_vim_starting = 1
  let g:committia_hooks = {}
  function! g:committia_hooks.edit_open(info) abort
    nmap <buffer><C-j> <Plug>(committia-scroll-diff-down-half)
    nmap <buffer><C-k> <Plug>(committia-scroll-diff-up-half)
  endfunction
'''

# jreybert/vimagit {{{2
[[plugins]]
repo = 'jreybert/vimagit'
hook_add = '''
  let g:magit_default_show_all_files = 2
  let g:magit_default_fold_level     = 0
  let g:magit_default_sections       = [
    \ 'info', 'commit',
    \ 'staged', 'unstaged', 'stash']

  augroup magit-keymap
    autocmd!
    autocmd FileType magit nmap <buffer> <SPACE>gj <C-n>
    autocmd FileType magit nmap <buffer> <SPACE>gk <C-p>
  augroup END
'''

# rickhowe/diffchar.vim {{{2
[[plugins]]
repo = 'rickhowe/diffchar.vim'
hook_add = '''
  let g:DiffUpdate      = 0
  let g:DiffPairVisible = 0
'''

# mattn/gist-vim {{{2
[[plugins]]
repo = 'mattn/gist-vim'
hook_add = '''
  let g:gist_update_on_write = 2
  let g:gist_post_private    = 1
'''

# lambdalisue/gina.vim {{{2
[[plugins]]
repo = 'lambdalisue/gina.vim'

#}}}1 END git plugins

# operator plugins {{{1
# kana/vim-operator-user {{{2
[[plugins]]
repo = 'kana/vim-operator-user'
hook_add = '''
  nmap R <Nop>
  nmap R <Plug>(operator-replace)
  xmap R <Nop>
  xmap R <Plug>(operator-replace)
  nmap s <Nop>
  xmap s <Nop>

  nmap <silent>sa <Plug>(operator-surround-append)
  nmap <silent>sd <Plug>(operator-surround-delete)
  nmap <silent>sr <Plug>(operator-surround-replace)
  nmap <silent>sc <Plug>(operator-camelize)gv
  nmap <silent>sC <Plug>(operator-decamelize)gv
  nmap <silent>se <Plug>(operator-html-escape)
  nmap <silent>sE <Plug>(operator-html-unescape)

  xmap <silent>sa <Plug>(operator-surround-append)
  xmap <silent>sd <Plug>(operator-surround-delete)
  xmap <silent>sr <Plug>(operator-surround-replace)
  xmap <silent>sc <Plug>(operator-camelize)gv
  xmap <silent>sC <Plug>(operator-decamelize)gv
  xmap <silent>se <Plug>(operator-html-escape)
  xmap <silent>sE <Plug>(operator-html-unescape)

  let g:operator#surround#blocks = {
    \ '-' : [
    \ {'block' : ['(', ')'],
    \ 'motionwise' : ['char', 'line', 'block'], 'keys' : ['b'] },
    \ {'block' : ['{', '}'],
    \ 'motionwise' : ['char', 'line', 'block'], 'keys' : ['B'] },
    \ {'block' : ["'", "'"],
    \ 'motionwise' : ['char', 'line', 'block'], 'keys' : ['s'] },
    \ {'block' : ['"', '"'],
    \ 'motionwise' : ['char', 'line', 'block'], 'keys' : ['d'] }
    \ ]}
'''

# kana/vim-operator-replace {{{2
[[plugins]]
repo = 'kana/vim-operator-replace'

# rhysd/vim-operator-surround {{{2
[[plugins]]
repo = 'rhysd/vim-operator-surround'

# tyru/operator-camelize.vim {{{2
[[plugins]]
repo = 'tyru/operator-camelize.vim'

# sgur/vim-textobj-parameter {{{2
[[plugins]]
repo = 'sgur/vim-textobj-parameter'
hook_add = '''
  let g:vim_textobj_parameter_mapping = 'a'
'''

# kana/vim-textobj-entire {{{2
[[plugins]]
repo = 'kana/vim-textobj-entire'

# tyru/operator-html-escape.vim {{{2
[[plugins]]
repo = 'tyru/operator-html-escape.vim'

# t9md/vim-textmanip {{{2
[[plugins]]
repo = 't9md/vim-textmanip'
hook_add = '''
  xmap <Space>d <Plug>(textmanip-duplicate-down)
  xmap <Space>D <Plug>(textmanip-duplicate-up)

  xmap <C-j> <Plug>(textmanip-move-down)
  xmap <C-k> <Plug>(textmanip-move-up)
  xmap <C-h> <Plug>(textmanip-move-left)
  xmap <C-l> <Plug>(textmanip-move-right)
'''

# kana/vim-textobj-user {{{2
[[plugins]]
repo = 'kana/vim-textobj-user'
hook_add = '''
  omap al <Plug>(textobj-indent-a)
  xmap al <Plug>(textobj-indent-a)
  omap il <Plug>(textobj-indent-i)
  xmap il <Plug>(textobj-indent-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-indent'

[[plugins]]
repo = 'thinca/vim-textobj-between'

# bronson/vim-visual-star-search {{{2
[[plugins]]
repo = 'bronson/vim-visual-star-search'

# itchyny/vim-cursorword {{{2
[[plugins]]
repo = 'itchyny/vim-cursorword'

# }}}1 END oparator plugins

# plugins {{{1
# Shougo/dein.vim {{{2
[[plugins]]
repo = 'Shougo/dein.vim'

# deresmos/nvim-term {{{2
[[plugins]]
repo = 'deresmos/nvim-term'
if = '''has('nvim')'''
hook_add = '''
  let g:nvimterm#enter_insert = 0
'''

# w0ng/vim-hybrid {{{2
[[plugins]]
repo = 'w0ng/vim-hybrid'

# kana/vim-submode {{{2
[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
  call submode#enter_with('windowmove', 'n', '', '<SPACE>ww', '<Nop>')
  call submode#map('windowmove', 'n', '', 'j', '<C-w>j')
  call submode#map('windowmove', 'n', '', 'k', '<C-w>k')
  call submode#map('windowmove', 'n', '', 'l', '<C-w>l')
  call submode#map('windowmove', 'n', '', 'h', '<C-w>h')
  call submode#map('windowmove', 'n', '', 'J', '<C-w>J')
  call submode#map('windowmove', 'n', '', 'K', '<C-w>K')
  call submode#map('windowmove', 'n', '', 'L', '<C-w>L')
  call submode#map('windowmove', 'n', '', 'H', '<C-w>H')

  call submode#enter_with('bufmove', 'n', '', '<SPACE>wr', '<Nop>')
  call submode#map('bufmove', 'n', '', 'l', '<C-w>>')
  call submode#map('bufmove', 'n', '', 'h', '<C-w><')
  call submode#map('bufmove', 'n', '', 'j', '<C-w>+')
  call submode#map('bufmove', 'n', '', 'k', '<C-w>-')

  call submode#enter_with('tabmove', 'n', '', '<SPACE>tt', '<Nop>')
  call submode#map('tabmove', 'n', '', 'l', ':tabnext<CR>')
  call submode#map('tabmove', 'n', '', 'h', ':tabprevious<CR>')
  call submode#map('tabmove', 'n', '', 'L', ':+tabmove<CR>')
  call submode#map('tabmove', 'n', '', 'H', ':-tabmove<CR>')
'''

# tyru/open-browser.vim {{{2
[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
  if system('uname') == "Linux\n"
    let g:openbrowser_browser_commands = [
      \ {"name": "firefox",
      \  "args": ["{browser}", "{uri}"]},
    \ ]
  endif
'''

# thinca/vim-qfreplace {{{2
[[plugins]]
repo = 'thinca/vim-qfreplace'

# vim-scripts/L9 {{{2
[[plugins]]
repo = 'vim-scripts/L9'

# easymotion/vim-easymotion {{{2
[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
  let g:EasyMotion_do_mapping = 0
  map f <Plug>(easymotion-bd-fl)
  map t <Plug>(easymotion-bd-tl)
  let g:EasyMotion_enter_jump_first = 1
  let g:EasyMotion_space_jump_first = 1
  nmap <SPACE>jj <Plug>(easymotion-overwin-f2)
  omap <SPACE>jj <Plug>(easymotion-overwin-f2)
  nmap <SPACE>jg <Plug>(easymotion-sn)
  omap <SPACE>jg <Plug>(easymotion-tn)
'''

# scrooloose/nerdtree {{{2
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  let g:NERDTreeMinimalUI = 1
  let g:NERDTreeAutoDeleteBuffer = 1
  let g:NERDTreeMapActivateNode = 'l'
  let g:NERDTreeMapChangeRoot = 'L'
  let g:NERDTreeMapUpdir = 'h'
  let g:NERDTreeMapUpdirKeepOpen = 'H'
  let g:NERDTreeMapOpenSplit = 's'
  let g:NERDTreeMapOpenVSplit = 'v'
  let g:NERDTreeMapOpenExpl = '<Nop>'
  augroup nerdtree-keymap
    autocmd!
    autocmd FileType nerdtree nmap <buffer> dd md
    autocmd FileType nerdtree nmap <buffer> DD mdy
    autocmd FileType nerdtree nmap <buffer> o ma
    autocmd FileType nerdtree nmap <buffer> i ml
    autocmd FileType nerdtree nmap <buffer> cp mc
    autocmd FileType nerdtree nmap <buffer> rn mm
    autocmd FileType nerdtree nmap <buffer> vd mv
  augroup END
'''

# deresmos/nerdtree-diff-plugin {{{2
[[plugins]]
repo = 'deresmos/nerdtree-diff-plugin'

# deresmos/nerdtree-yp-plugin {{{2
[[plugins]]
repo = 'deresmos/nerdtree-yp-plugin'
hook_add = '''
  augroup nerdtree-yp-keymap
    autocmd!
    autocmd FileType nerdtree nmap <buffer> yy my
    autocmd FileType nerdtree nmap <buffer> pp mp
  augroup END
'''

# deresmos/nerdtree-dirdiff-plugin {{{2
[[plugins]]
repo = 'deresmos/nerdtree-dirdiff-plugin'
hook_add = '''
  augroup nerdtree-dirdiff-keymap
    autocmd!
    autocmd FileType nerdtree nmap <buffer> dt mt
    autocmd FileType nerdtree nmap <buffer> dw mw
  augroup END
'''

# mhinz/vim-startify {{{2
[[plugins]]
repo = 'mhinz/vim-startify'
hook_add = '''
let g:startify_files_number = 10
let g:startify_custom_indices = ['a', 'b', 'c', 'd', 'f', 'g', 'i', 'm',
  \ 'n', 'o', 'p', 'r', 's', 't', 'u', 'v', 'w', 'x', 'z']
let g:startify_list_order = [
  \ ['Bookmarks:'],
  \ 'bookmarks',
  \ ['Recentry open files:'],
  \ 'files',
  \ ['Recentry open files in dir:'],
  \ 'dir',
  \ ]

let g:startify_session_sort = 0

let g:startify_session_before_save = [
  \ 'echo "Cleaning up before saving..."',
  \ 'silent! NERDTreeClose',
  \ 'silent! bd __XtermColorTable__',
  \ ]

let g:startify_custom_header = [
\"        _                                   _            ",
\"     __| |  ___  _ __   ___  ___    __   __(_) _ __ ___  ",
\"    / _` | / _ \\| '__| / _ \\/ __|   \\ \\ / /| || '_ ` _ \\ ",
\"   | (_| ||  __/| |   |  __/\\__ \\ _  \\ V / | || | | | | |",
\"    \\__,_| \\___||_|    \\___||___/(_)  \\_/  |_||_| |_| |_|",
\ ]
let g:startify_change_to_dir = 1
'''

# LeafCage/yankround.vim {{{2
[[plugins]]
repo = 'LeafCage/yankround.vim'
hook_add = '''
  nmap p <Plug>(yankround-p)
  nmap P <Plug>(yankround-P)
  nmap <C-p> <Plug>(yankround-prev)
  nmap <C-n> <Plug>(yankround-next)
  let g:yankround_max_history = 10
  let g:yankround_use_region_hl = 1
'''

# kana/vim-smartinput {{{2
[[plugins]]
repo = 'kana/vim-smartinput'
hook_add = '''
  call smartinput#define_rule({
  \   'at'       : '^\s*\%(\<def\>\|\<if\>\|\<for\>\|\<while\>\|\<class\>\|\<with\>\)\s*\w\+.*\%#',
  \   'char'     : '(',
  \   'input'    : '():<Left><Left>',
  \   'filetype' : ['python'],
  \   })
  call smartinput#define_rule({
  \   'at'       : '^\s*\%(\<def\>\|\<if\>\|\<for\>\|\<while\>\|\<class\>\|\<with\>\)\s*\w\+.*\%#.*:',
  \   'char'     : '(',
  \   'input'    : '()<Left>',
  \   'filetype' : ['python'],
  \   })
'''

# LeafCage/foldCC.vim {{{2
[[plugins]]
repo = 'LeafCage/foldCC.vim'
hook_add = '''
  let g:foldCCtext_maxchars = 79
  let g:foldCCtext_head     = 'v:folddashes . " "'
  let g:foldCCtext_tail     = 'printf(" %s [ %4d lines ]",
    \ v:folddashes, v:foldend-v:foldstart+1)'
  let g:foldCCnavi_maxchars = 60
'''

# itchyny/lightline.vim {{{2
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let s:small_width = 50
  let s:medium_width = 70
  let s:large_width = 100

  let g:lightline = {}
  let g:lightline = {
    \ 'colorscheme': 'wombat',
    \ 'subseparator': {'left': '|', 'right': '|'},
    \ 'mode_map': {'c': 'NORMAL'},
    \ 'active': {
    \   'left': [
    \     ['mode', 'paste', 'readonly'],
    \     ['branchname', 'gitgutter'],
    \     ['currenttag'],
    \   ],
    \   'right': [
    \     ['lineinfo'],
    \     ['fileindent', 'charcode', 'fileformat', 'fileencoding', 'filetype'],
    \     ['ale'],
    \   ]
    \ },
    \ 'inactive': {
    \   'left': [
    \     [''],
    \     ['filename'],
    \   ],
    \   'right': [
    \     [''],
    \     ['number', ''],
    \   ]
    \ },
    \ 'tabline': {
    \   'left': [
    \     ['tabs'],
    \   ],
    \   'right': [
    \     ['filename'],
    \     ['number', 'maxline'],
    \   ]
    \ },
    \ 'component_function': {
    \   'modified': 'MyModified',
    \   'branchname': 'gina#component#repo#branch',
    \   'filename': 'MyFilename',
    \   'filenamefull': 'MyFilenameFull',
    \   'lineinfo': 'MyLineInfo',
    \   'fileindent': 'MyFileIndent',
    \   'maxline': 'MaxLine',
    \   'fileformat': 'MyFileformat',
    \   'filetype': 'MyFiletype',
    \   'fileencoding': 'MyFileencoding',
    \   'mode': 'MyMode',
    \   'gitgutter': 'MyGitGutter',
    \   'ale': 'AleStatus',
    \   'currenttag': 'MyCurrentTag',
    \ },
    \ 'component_expand': {
    \   'readonly': 'MyReadonly',
    \   'tabs': 'lightline#tabs',
    \ },
    \ 'component_type': {
    \   'readonly': 'error',
    \   'tabs': 'tabsel',
    \ },
    \ 'component': {
    \   'number': 'w%{winnr()}:b%n',
    \ },
    \ 'tab_component_function': {
    \   'tabfilename_active':   'MyTabFilenameActive',
    \   'tabfilename_inactive': 'MyTabFilenameInactive',
    \   'tabmodified':          'MyTabModified',
    \ },
    \ 'tab': {
    \   'active':   ['tabfilename_active',   'tabmodified'],
    \   'inactive': ['tabfilename_inactive', 'modified'],
    \ },
  \ }

  function! s:MyTabFilename(n, length) abort
    let l:buflist = tabpagebuflist(a:n)
    let l:winnr = tabpagewinnr(a:n)
    let l:filename = expand('#' . l:buflist[l:winnr - 1] . ':t')
    return l:filename !=# '' ? l:filename[0:a:length] : '[No Name]'
  endfunction

  function! MyTabFilenameActive(n) abort
    return a:n
  endfunction

  function! MyTabFilenameInactive(n) abort
    return a:n
  endfunction

  let s:p = g:lightline#colorscheme#wombat#palette
  let s:tabsel = [['#d0d0d0', '#242424', 252, 235]]
  let s:p.normal.right = [['#444444 ', '#8ac6f2', 238, 117], ['#d0d0d0', '#585858', 252, 240]]
  let s:p.insert.right = [['#444444 ', '#95e454', 238, 119], ['#d0d0d0', '#585858', 252, 240]]
  let s:p.visual.right = [['#444444 ', '#f2c68a', 238, 216], ['#d0d0d0', '#585858', 252, 240]]
  let s:p.tabline.right = [['#d0d0d0', '#585858', 252, 240]]
  let s:p.tabline.left = [['#767676', '#242424', 243, 235]]
  let s:p.tabline.tabsel = s:tabsel
  let g:lightline#colorscheme#wombat#palette = s:p

  function! MaxLine() abort
    return 'L:' . line('$')
  endfunction

  function! MyTabModified(n) abort
    let s:p = g:lightline#colorscheme#wombat#palette
    let s:p.tabline.tabsel = &modified ? [['#5fff00', '#242424', 82, 235]] : s:tabsel
    let g:lightline#colorscheme#wombat#palette = s:p

    call lightline#colorscheme()

    return ''
  endfunction

  function! MyLineInfo() abort
    return 'L' . line('.') . ':R' . printf('%03d', virtcol('$'))
  endfunction

  function! MyModified() abort
    return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfunction

  function! MyReadonly() abort
    return &readonly ? 'Readonly' : ''
  endfunction

  function! MyFilename() abort
    let filename = (expand('%:p') == '') ? '[No Name]' : expand('%:p')
    let filename = substitute(filename, expand('$HOME'), '~', 'g')
    if strlen(filename) > winwidth(0) * 0.75
      let filename = expand('%:t')
    endif

    return filename
  endfunction

  function! MyFilenameFull() abort
    return '' != expand('%:p') ? expand('%:p') : '[No Name]'
  endfunction

  function! MyCurrentTag() abort
    let l:_ = winwidth(0) > s:large_width ? tagbar#currenttag('%s', '') : ''
    let l:_ = l:_[:40]
    return l:_
  endfunction

  function! MyGitGutter() abort
    if ! exists('*GitGutterGetHunkSummary')
      \ || ! get(g:, 'gitgutter_enabled', 0)
      \ || winwidth(0) <= s:medium_width
    endif

    let symbols = ['+','~', '-']
    let hunks = GitGutterGetHunkSummary()
    let ret = []
    for i in [0, 1, 2]
      if hunks[i] > 0
        call add(ret, symbols[i] . hunks[i])
      endif
    endfor

    return join(ret, ' ')
  endfunction

  function! MyFileIndent() abort
    return winwidth(0) > s:small_width ? spatab#GetDetectName() : ''
  endfunction

  function! MyFileformat() abort
    return winwidth(0) > s:small_width ? &fileformat : ''
  endfunction

  function! MyFiletype() abort
    return winwidth(0) > s:medium_width ? (strlen(&filetype) ? &filetype : 'no ft') : ''
  endfunction

  function! MyFileencoding() abort
    return winwidth(0) > s:small_width ? (strlen(&fenc) ? &fenc : &enc) : ''
  endfunction

  function! MyMode() abort
    return lightline#mode()
  endfunction
'''

# scrooloose/nerdcommenter {{{2
[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
  let g:NERDCommentEmptyLines      = 1
  let g:NERDTrimTrailingWhitespace = 1
  let g:NERDSpaceDelims            = 1
  let g:NERDCompactSexyComs        = 1
  let g:NERDDefaultAlign           = 'left'

  let g:NERDCustomDelimiters = {
      \ 'wsh': { 'left': "'" },
  \ }
'''

# junegunn/vim-easy-align {{{2
[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
  xmap ga <Plug>(EasyAlign)
'''

# haya14busa/vim-migemo # {{{2
# yaourt cmigemo
[[plugins]]
repo = 'haya14busa/vim-migemo'

# schickling/vim-bufonly # {{{2
[[plugins]]
repo = 'schickling/vim-bufonly'

# qpkorr/vim-renamer {{{2
[[plugins]]
repo = 'qpkorr/vim-renamer'

# fuenor/qfixhowm {{{2
[[plugins]]
repo = 'fuenor/qfixhowm'
hook_add = '''
  let g:QFixHowm_Key            = '<Nop>'
  let g:howm_fileencoding       = 'utf-8'
  let g:howm_fileformat         = 'unix'
  let g:qfixmemo_diary          = '%Y/%m/%Y-%m-%d'
  let g:QFixHowm_CalendarWinCmd = 'rightbelow'
  let g:QFixHowm_CalendarCount  = 3
  let g:QFixHowm_FileType       = 'qfix_memo'
  let g:qfixmemo_template       = ['%TITLE% ']
  let g:qfixmemo_use_addtime    = 0
  let g:qfixmemo_use_updatetime = 0
  let g:QFixHowm_SaveTime       = -1

  let g:QFixHowm_RootDir         = '~/.howm'
  let g:howm_dir                 = g:QFixHowm_RootDir . '/main'
  let g:qfixmemo_folding_pattern = '^=[^=]'

  function! QFixMemoBufRead()
    setlocal foldenable
  endfunction

  command! -nargs=1 HowmDir let g:howm_dir = g:QFixHowm_RootDir.'/'.<q-args>|echo 'Switched' <q-args>
  nnoremap <silent> <SPACE>hpw :<C-u>HowmDir work<CR>
  nnoremap <silent> <SPACE>hpm :<C-u>HowmDir main<CR>
  nnoremap <silent> <SPACE>hpl :<C-u>call <SID>pullHowm()<CR>
  nnoremap <silent> <SPACE>hps :<C-u>call <SID>pushHowm()<CR>

  function! s:pullHowm() abort " {{{
    execute 'AsyncRun -cwd=' . g:QFixHowm_RootDir 'git pull origin master'
  endfunction
  " }}}
  function! s:pushHowm() abort " {{{
    execute 'AsyncRun -cwd=' . g:QFixHowm_RootDir ' git add . && git commit -m "commit" && git push origin master'
  endfunction
  " }}}

'''

# haya14busa/incsearch.vim {{{2
[[plugins]]
repo = 'haya14busa/incsearch.vim'
hook_add = '''
  map /  <Plug>(incsearch-forward)
  map g/ <Plug>(incsearch-stay)
'''

[[plugins]]
repo = 'haya14busa/incsearch-fuzzy.vim'
hook_add = '''
  nmap <Space>z;   <Plug>(incsearch-fuzzy-/)
  nmap <Space>zg;  <Plug>(incsearch-fuzzy-stay)
  nmap <Space>zs;  <Plug>(incsearch-fuzzyspell-/)
  nmap <Space>zsg; <Plug>(incsearch-fuzzyspell-stay)
'''

[[plugins]]
repo = 'haya14busa/incsearch-migemo.vim'
hook_add = '''
  nmap <Space>m;  <Plug>(incsearch-migemo-/)
  nmap <Space>mg; <Plug>(incsearch-migemo-stay)
'''

# mhinz/neovim-remote {{{2
[[plugins]]
repo = 'mhinz/neovim-remote'

# mbbill/undotree {{{2
[[plugins]]
repo = 'mbbill/undotree'

# thinca/vim-zenspace {{{2
[[plugins]]
repo = 'thinca/vim-zenspace'

# cocopon/colorswatch.vim {{{2
[[plugins]]
repo = 'cocopon/colorswatch.vim'

# guns/xterm-color-table.vim {{{2
[[plugins]]
repo = 'guns/xterm-color-table.vim'

# AndrewRadev/switch.vim {{{2
[[plugins]]
repo = 'AndrewRadev/switch.vim'

# t9md/vim-quickhl {{{2
[[plugins]]
repo = 't9md/vim-quickhl'
hook_add = '''
  nnoremap <Space>mp :QuickhlManualAdd<space>
  nmap <Space>mt <Plug>(quickhl-manual-this)
  xmap <Space>mt <Plug>(quickhl-manual-this)
  nmap <Space>mT <Plug>(quickhl-manual-reset)
  xmap <Space>mT <Plug>(quickhl-manual-reset)
  nmap <Space>mc <Plug>(quickhl-cword-toggle)
'''

# hecal3/vim-leader-guide {{{2
[[plugins]]
repo = 'hecal3/vim-leader-guide'
hook_add = '''
  let g:lmap =  {} " {{{
  let g:lmap = {
  \   'f': {
  \     'name': 'file',
  \   },
  \   'q': {
  \     'name': 'quit and Qfreplace',
  \   },
  \   'd': {
  \     'name': 'denite',
  \   },
  \   'b': {
  \     'name': 'buffer',
  \   },
  \   'p': {
  \     'name': 'project and paste',
  \   },
  \   'y': {
  \     'name': 'yank',
  \   },
  \   't': {
  \     'name': 'tab, tags, terminal and toggle',
  \   },
  \   'w': {
  \     'name': 'window',
  \   },
  \   'g': {
  \     'name': 'git',
  \   },
  \   'v': {
  \     'name': 'fold',
  \   },
  \   's': {
  \     'name': 'session and SeachBuffers',
  \   },
  \   'h': {
  \     'name': 'howm',
  \   },
  \   'r': {
  \     'name': 'reset, replace, rename and record',
  \   },
  \   'j': {
  \     'name': 'etc',
  \   },
  \   'c': {
  \     'name': 'commenter',
  \   },
  \   'o': {
  \     'name': 'browser and markdown',
  \   },
  \   'm': {
  \     'name': 'mark and program',
  \   },
  \   'u': {
  \     'name': 'update and undo',
  \   },
  \   'a': {
  \     'name': 'align',
  \   },
  \   'e': {
  \     'name': 'linter',
  \   },
  \ }
  " }}}

  call leaderGuide#register_prefix_descriptions("<Space>", "g:lmap")
  nnoremap <silent> <Space>? :<C-u>LeaderGuide '<Space>'<CR>
'''

# tpope/vim-repeat {{{2
[[plugins]]
repo = 'tpope/vim-repeat'

# mattn/webapi-vim {{{2
[[plugins]]
repo = 'mattn/webapi-vim'

# tpope/tpope-vim-abolish {{{2
[[plugins]]
repo = 'tpope/tpope-vim-abolish'

# adelarsq/vim-matchit {{{2
[[plugins]]
repo = 'adelarsq/vim-matchit'
hook_add = '''
  augroup matchit-settings
    autocmd!
    autocmd FileType wsh,vb,aspvbs let b:match_words="\\<function\\>:\\<end function\\>,\\<sub\\>:\\<end sub\\>,\\<with\\>:\\<end with\\>,\\<while\\>:\\<wend\\>,\\<for\\>:\\<next\\>,\\<on error resume next\\>:\\<on error\\>,\\<if\\>:\\<end if\\>"
  augroup END
'''

# machakann/vim-highlightedyank {{{2
[[plugins]]
repo = 'machakann/vim-highlightedyank'
hook_add = '''
  let g:highlightedyank_highlight_duration = 500

  augroup HighlightedYankColorScheme
    autocmd!
    autocmd ColorScheme * highlight HighlightedyankRegion ctermfg=none ctermbg=237 cterm=bold
  augroup END
'''

# google/vim-searchindex {{{2
[[plugins]]
repo = 'google/vim-searchindex'
hook_add = '''
  map <silent> n  nzz<Plug>SearchIndex
  map <silent> N  Nzz<Plug>SearchIndex
  map <silent> *  <Plug>ImprovedStar_*zz<Plug>SearchIndex
  map <silent> #  <Plug>ImprovedStar_#zz<Plug>SearchIndex
  map <silent> g* <Plug>ImprovedStar_g*zz<Plug>SearchIndex
  map <silent> g# <Plug>ImprovedStar_g#zz<Plug>SearchIndex
'''

# deresmos/vim-spatab {{{2
[[plugins]]
repo = 'deresmos/vim-spatab'
hook_add = '''
  let g:spatab_count_mode = 1

  augroup vim-spatab
    autocmd!
    autocmd BufReadPost * STDetect
  augroup END
'''

# andreshazard/vim-logreview {{{2
[[plugins]]
repo = 'andreshazard/vim-logreview'


#}}}1 END plugins

# Programing plugins {{{1
# deresmos/vim-snippets {{{2
[[plugins]]
repo = 'deresmos/vim-snippets'
if = '''has('nvim')'''

# w0rp/ale {{{2
[[plugins]]
repo = 'w0rp/ale'
if ='''has('nvim')'''
hook_add = '''
  nnoremap <silent> <SPACE>af :<C-u>silent! ALEFix<CR>
  augroup custom-ale
    autocmd!
    autocmd FileType python let b:ale_fix_on_save = 1
  augroup END

  let g:ale_sign_column_always   = 1
  let g:ale_lint_on_insert_leave = 1
  let g:ale_lint_on_text_changed = 'normal'
  let g:ale_enabled              = 0

  let g:ale_sign_error           = '!!'
  let g:ale_sign_warning         = '??'
  let g:ale_echo_msg_error_str   = 'E'
  let g:ale_echo_msg_warning_str = 'W'

  let g:ale_echo_msg_format   = '%s [%severity%] | %linter%'

  function! AleStatus()
    if !get(b:, 'ale_enabled', 0) && !g:ale_enabled
      return ''
    endif

    let counts = ale#statusline#Count(bufnr(''))

    if !counts['total']
      return 'OK'
    endif

    return printf('E%d W%d', counts[0], counts[1])
  endfunction

  let g:ale_linters = {
    \ 'python': ['flake8', 'mypy', 'bandit'],
    \ 'javascript': ['eslint'],
    \ 'php': ['phpcs'],
    \ 'css': ['stylelint'],
    \ 'xhtml': ['tidy'],
    \ }

  let g:ale_type_map = {'flake8': {'ES': 'WS'}}
  let g:ale_css_stylelint_options='-c stylelint'
  let g:ale_python_mypy_options='--ignore-missing-imports'

  let g:ale_html_tidy_options='-config ~/.tidy_linter -e'
  let g:ale_php_phpcs_standard='PSR2'
  let g:ale_linter_aliases = {'xhtml': 'html'}

  let g:ale_fixers = {
    \ 'html': [
    \   {buffer, lines -> {
    \   'command': 'tidy -config ~/.tidy_fix %s'}}
    \ ],
    \ 'xhtml': [
    \   {buffer, lines -> {
    \   'command': 'tidy -config ~/.tidy_fix %s'}}
    \ ],
    \ 'javascript': [
    \   {buffer, lines -> {
    \   'command': 'eslint --config ~/.eslintrc.js --fix %t',
    \   'read_temporary_file': 1}}
    \ ],
    \ 'css': [
    \   {buffer, lines -> {
    \   'command': 'stylelint -c stylelint --fix %t',
    \   'read_temporary_file': 1}},
    \   {buffer, lines -> {
    \   'command': 'csscomb -c ~/.csscomb.json %s'}}
    \ ],
    \ 'php': [
    \   {buffer, lines -> {
    \   'command': 'phpcbf --standard=PSR2 %t',
    \   'read_temporary_file': 1}}
    \ ],
    \ 'python': [
    \   'isort',
    \   {buffer, lines -> {
    \   'command': 'yapf -i --style pep8 %t',
    \   'read_temporary_file': 1}}
    \ ],
    \ 'markdown': [
    \   {buffer, lines -> {
    \   'command': 'textlint -c ~/.config/textlintrc -o /dev/null --fix --no-color --quiet %t',
    \   'read_temporary_file': 1}}
    \ ],
    \ 'sql': [
    \   {buffer, lines -> {
    \   'command': 'sqlformat --reindent --keywords upper -s %t | sql-formatter-cli -o %t',
    \   'read_temporary_file': 1}}
    \ ],
    \ }
  " let g:ale_fix_on_save = 1

  highlight link ALEWarningSign SpellCap
'''

# thinca/vim-quickrun {{{2
[[plugins]]
repo = 'thinca/vim-quickrun'
if = '''has('nvim')'''
hook_add = '''
  let g:quickrun_config={'_': {'split': ''}}
  let g:quickrun_config._={
    \ 'hook/time/enable': '1',
    \ 'runner'    : 'vimproc',
    \ 'runner/vimproc/updatetime' : 60,
    \ 'outputter' : 'error',
    \ 'outputter/error/success' : 'buffer',
    \ 'outputter/error/error'   : 'quickfix',
    \ 'outputter/buffer/split'  : ':botright 6sp',
    \ 'outputter/buffer/close_on_empty' : 1,
    \ 'outputter/buffer/running_mark': ''
  \ }

  let g:quickrun_config['python'] = {
    \ 'type'    : 'python',
    \ 'command' : 'python',
    \ 'cmdopt'    : '-u',
  \}
'''

# Chiel92/vim-autoformat {{{2
[[plugins]]
repo = 'Chiel92/vim-autoformat'
if = '''has('nvim')'''
hook_add = '''
  let g:formatter_yapf_style = 'pep8'
  let g:formatdef_csscomb    = '"csscomb"'
  let g:formatters_css       = ['csscomb', 'cssbeautify']
'''

# majutsushi/tagbar {{{2
[[plugins]]
repo = 'deresmos/tagbar'
if = '''has('nvim')'''
hook_add = '''
  let g:tagbar_previewwin_pos    = "rightbelow"
  let g:tagbar_iconchars         = ['+', '-']
  let g:tagbar_map_openallfolds  = '-'
  let g:tagbar_map_closeallfolds = '='
  let g:tagbar_sort              = 0

  let g:tagbar_map_showproto = '<Nop>'
  let g:tagbar_map_nexttag   = '<C-j>'
  let g:tagbar_map_prevtag   = '<C-k>'
  let g:tagbar_map_openfold  = '<Space>vo'
  let g:tagbar_map_closefold = '<Space>vc'

  let g:tagbar_type_dosini = {
  \  'ctagstype': 'ini',
  \  'kinds': [
  \    's:Sections:1:1',
  \  ]
  \}

  let g:tagbar_type_css = {
  \  'ctagstype' : 'mycss',
  \  'kinds' : [
  \    's:Selectors:1:1',
  \    '@:@:0:1',
  \    'c:Classes:1:0',
  \    'i:Identities:1:0',
  \    'e:Elements:1:0',
  \  ]
  \}

  let g:tagbar_type_javascript = {
  \  'ctagstype' : 'myjs',
  \  'kinds' : [
  \    'f:Functions:0:1',
  \    'v:Variables:1:0',
  \    'a:Arrays:1:0',
  \    'n:Numbers:1:0',
  \    's:Strings:1:0',
  \    'b:Bools:1:0',
  \    'j:jQuery:1:0',
  \    'z:Functions:1:1'
  \  ]
  \}

  let g:tagbar_type_php = {
  \  'ctagstype' : 'myphp',
  \  'kinds' : [
  \    'd:Const Definitions:0:0',
  \    'c:Classes:0:1',
  \    'm:Methods:0:1',
  \    'F:Functions:0:1',
  \    'p:Properties:1:0',
  \    'v:Variables:1:0'
  \  ]
  \}

  let g:tagbar_type_html = {
  \  'ctagstype' : 'myhtml',
  \  'kinds' : [
  \    'i:Identities:0:0',
  \    'c:Classes:0:1',
  \  ]
  \}

  let g:tagbar_type_xhtml = {
  \  'ctagstype' : 'myhtml',
  \  'kinds' : [
  \    'i:Identities:1:0',
  \    'c:Classes:1:0',
  \    'e:Ebisu tags:1:0',
  \  ]
  \}

  let s:tagbar_type_vbs = {
  \  'ctagstype' : 'myvbs',
  \  'kinds' : [
  \    'd:Constants:0:0',
  \    'f:Functions:1:1',
  \    's:Subroutines:1:1',
  \    'v:Variables:1:0',
  \  ]
  \}

  let g:tagbar_type_wsh    = s:tagbar_type_vbs
  let g:tagbar_type_aspvbs = s:tagbar_type_vbs
  let g:tagbar_type_vb     = s:tagbar_type_vbs
'''


# AndrewRadev/linediff.vim {{{2
[[plugins]]
repo = 'AndrewRadev/linediff.vim'

# chrisbra/SudoEdit.vim {{{2
[[plugins]]
repo = 'chrisbra/SudoEdit.vim'

# maxwell-k/dbext.vim {{{2
[[plugins]]
repo = 'maxwell-k/dbext.vim'
hook_add = '''
  if filereadable(expand('~/.dbextrc'))
    execute 'source' expand('~/.dbextrc')
  endif

  let g:dbext_default_buffer_lines = 25

  nmap <Space>mdp <Plug>DBPromptForBufferParameters
  nmap <Space>mdsp :<C-u>DBSetOption profile=
  nmap <Space>mdsP :<C-u>DBSetOption passwd=

  nmap <Space>mdlt <Plug>DBListTable<CR>
  nmap <Space>mdlv <Plug>DBListView
  nmap <Space>mdlp <Plug>DBListProcedure

  nmap <Space>mdi <Plug>DBSelectFromTable
  nmap <Space>mdd <Plug>DBDescribeTable
  nmap <Space>mdh <Plug>DBHistory
  nmap <Space>mdI <Plug>DBSelectFromTableWithWhere

  nmap <Space>mdr <Plug>DBExecSQLUnderCursor
  xmap <Space>mdr <Plug>DBExecVisualSQL
'''

# KabbAmine/vCoolor.vim {{{2
[[plugins]]
repo = 'KabbAmine/vCoolor.vim'
hook_add = '''
  let g:vcoolor_disable_mappings = 1
  let g:vcoolor_lowercase = 0
  nnoremap <SPACE>ocp :VCoolor<CR>
  nnoremap <SPACE>ocP :VCoolIns r<CR>
'''

# chrisbra/colorizer {{{2
[[plugins]]
repo = 'chrisbra/colorizer'
if = '''has('nvim')'''
hook_source = '''
  let g:colorizer_auto_color = 0
  let g:colorizer_auto_map = 0
'''

# will133/vim-dirdiff {{{2
[[plugins]]
repo = 'will133/vim-dirdiff'

# MattesGroeger/vim-bookmarks {{{2
[[plugins]]
repo = 'MattesGroeger/vim-bookmarks'
hook_add = '''
  let g:bookmark_no_default_key_mappings = 1
  let g:bookmark_auto_save_file          = g:vim_dir . '/.bookmarks'
  let g:bookmark_location_list           = 1
  let g:bookmark_sign                    = '//'
  let g:bookmark_annotation_sign         = '//'

  highlight default link BookmarkAnnotationSign BookmarkSign

  nnoremap [Bookmark] <Nop>
  nmap <Space>bm [Bookmark]

  nmap <silent> [Bookmark]t <Plug>BookmarkToggle
  nmap <silent> [Bookmark]a <Plug>BookmarkAnnotate
  nmap <silent> [Bookmark]l <Plug>BookmarkShowAll
  nmap <silent> [Bookmark]j <Plug>BookmarkNext
  nmap <silent> [Bookmark]k <Plug>BookmarkPrev
  nmap <silent> [Bookmark]C <Plug>BookmarkClear
  nmap <silent> [Bookmark]X <Plug>BookmarkClearAll
  nmap <silent> [Bookmark]jj <Plug>BookmarkMoveDown
  nmap <silent> [Bookmark]kk <Plug>BookmarkMoveUp
  nmap <silent> [Bookmark]g <Plug>BookmarkMoveToLine
  nmap [Bookmark]S :BookmarkSave<space>
  nmap [Bookmark]L :BookmarkLoad<space>
'''

# }}}1

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_guide_size            = 1
  let g:indent_guides_start_level           = 2
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_enable_on_vim_startup = 0
  nnoremap <silent> <Space>tsL :IndentGuidesToggle<CR>

  let g:indent_guides_exclude_filetypes = [
    \ 'help',
    \ 'nerdtree',
    \ 'tagbar',
    \ 'nvim-term',
    \ 'nvim-term-t',
  \ ]

'''

[[plugins]]
repo = 'rhysd/conflict-marker.vim'
hook_add = '''
  let g:conflict_marker_enable_mappings = 0

  nmap <silent> <Space>gcj <Plug>(conflict-marker-next-hunk)
  nmap <silent> <Space>gck <Plug>(conflict-marker-prev-hunk)
  nmap <silent> <Space>gct <Plug>(conflict-marker-themselves)
  nmap <silent> <Space>gco <Plug>(conflict-marker-ourselves)
  nmap <silent> <Space>gcn <Plug>(conflict-marker-none)
  nmap <silent> <Space>gcb <Plug>(conflict-marker-both)

'''

[[plugins]]
repo = 'skywind3000/asyncrun.vim'
hook_add = '''
  function! s:asyncrun_after()
    let defualt_cmd = 'copen | wincmd p'
    let cmd = get(b:, 'asyncrun_after_cmd', v:null)
    if cmd == v:null
      let cmd = defualt_cmd
    endif

    execute cmd

    " Reset asyncrun_after_cmd
    if exists('b:asyncrun_after_cmd')
      unlet b:asyncrun_after_cmd
    endif

  endfunction

  augroup custom-asyncrun
    autocmd!
    autocmd User AsyncRunStart highlight! LightlineMiddle_active ctermbg=34
    autocmd User AsyncRunStop highlight! link LightlineMiddle_active LightlineMiddle_normal | call s:asyncrun_after()
  augroup END
'''

[[plugins]]
repo = 'sheerun/vim-polyglot'
build = './build'
hook_add = '''
  let g:quickrun_config['pug'] = {
    \ 'command': 'pug', 'cmdopt': '--pretty', 'exec': ['%c %o < %s']
  \ }

  augroup my-pug-augroup
    autocmd!
    " autocmd FileType pug setlocal syntax=css
  augroup END
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
build = 'coc#util#install()'
hook_add = '''

  nmap <silent> <SPACE>mgg <Plug>(coc-definition)
  " nmap <silent> gy <Plug>(coc-type-definition)
  " nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> <SPACE>mu <Plug>(coc-references)
  nmap <silent> <SPACE>m= <Plug>(coc-format)
  nmap <silent> <SPACE>mr <Plug>(coc-rename)

  autocmd CursorHold * silent call CocActionAsync('highlight')
  nnoremap <silent> <SPACE>md :call <SID>show_documentation()<CR>
  function! s:show_documentation()
    if &filetype == 'vim'
      execute 'h '.expand('<cword>')
    else
      call CocActionAsync('doHover')
    endif
  endfunction

'''
