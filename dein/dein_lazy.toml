# common plugins {{{1
# Shougo/neomru.vim {{{2
[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = 'denite.nvim'

# Shougo/neoyank.vim {{{2
[[plugins]]
repo = 'Shougo/neoyank.vim'
on_source = 'denite.nvim'

# rafi/vim-denite-session {{{2
[[plugins]]
repo = 'rafi/vim-denite-session'
on_source = 'denite.nvim'
hook_source = '''
  call denite#custom#var('session', 'path', g:startify_session_dir)
'''

# deresmos/denite-gitdiff {{{2
[[plugins]]
repo = 'deresmos/denite-gitdiff'
on_source = 'denite.nvim'

# Shougo/denite.nvim {{{2
[[plugins]]
repo = 'Shougo/denite.nvim'
if = '''has('python3')'''
hook_source = '''
  call denite#custom#option('default', 'prompt', '>')

  " custom mapping {{{
  call denite#custom#map(
    \ 'normal',
    \ 'l',
    \ '<denite:do_action:default>',
    \ 'noremap')

  call denite#custom#map(
    \ 'normal',
    \ 'h',
    \ '<denite:restore_sources>',
    \ 'noremap')

  call denite#custom#map(
    \ 'normal',
    \ 'gj',
    \ '<denite:jump_to_next_by:path>',
    \ 'noremap')

  call denite#custom#map(
    \ 'normal',
    \ 'gk',
    \ '<denite:jump_to_previous_by:path>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-j>',
    \ '<denite:move_to_next_line>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-k>',
    \ '<denite:move_to_previous_line>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-n>',
    \ '../',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-p>',
    \ '<denite:do_action:preview>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-a>',
    \ '<denite:move_caret_to_head>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-e>',
    \ '<denite:move_caret_to_tail>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-t>',
    \ '<denite:do_action:tabopen>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-s>',
    \ '<denite:do_action:split>',
    \ 'noremap')

  call denite#custom#map(
    \ 'normal',
    \ 's',
    \ '<denite:do_action:split>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-v>',
    \ '<denite:do_action:vsplit>',
    \ 'noremap')

  call denite#custom#map(
    \ 'normal',
    \ 'v',
    \ '<denite:do_action:vsplit>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ 'fd',
    \ '<denite:enter_mode:normal>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-d><C-t>',
    \ '<denite:do_action:tabvdiff>',
    \ 'noremap')

  call denite#custom#map(
    \ 'normal',
    \ 'dt',
    \ '<denite:do_action:tabvdiff>',
    \ 'noremap')

  call denite#custom#map(
    \ 'normal',
    \ 'dlt',
    \ '<denite:do_action:tabvdiff_local>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-d><C-m>',
    \ '<denite:do_action:openvdiff>',
    \ 'noremap')

  call denite#custom#map(
    \ 'normal',
    \ 'dm',
    \ '<denite:do_action:openvdiff>',
    \ 'noremap')

  call denite#custom#map(
    \ 'normal',
    \ 'dlm',
    \ '<denite:do_action:openvdiff_local>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-f><C-m>',
    \ '<denite:do_action:branch_log>',
    \ 'noremap')

  call denite#custom#map(
    \ 'normal',
    \ 'fm',
    \ '<denite:do_action:branch_log>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-d><C-d>',
    \ '<denite:do_action:delete>',
    \ 'noremap')

  call denite#custom#map(
    \ 'normal',
    \ 'dd',
    \ '<denite:do_action:delete>',
    \ 'noremap')

  call denite#custom#map(
    \ 'normal',
    \ 'rp',
    \ '<denite:do_action:qfreplace>',
    \ 'noremap')

  " }}}

  " custom color {{{
  call denite#custom#option('default', 'highlight_matched_char', 'Search')
  call denite#custom#option('default', 'highlight_mode_insert', 'DeniteCursorLine')
  call denite#custom#option('default', 'highlight_mode_normal', 'DeniteCursorLine')
  call denite#custom#option('default', 'mode', 'normal')
  " }}}

  " custom command {{{
  if executable('rg')
    call SwitchGrepCommand('rg')
  elseif executable('pt')
    call SwitchGrepCommand('pt')
  endif

  call SwitchMatherFuzzy()

  call denite#custom#source('file_rec', 'matchers',
    \ ['matcher_fuzzy', 'matcher_ignore_globs'])
  call denite#custom#source('file', 'matchers',
    \ ['matcher_fuzzy', 'matcher_ignore_globs'])

  call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
    \ [ '*~', '*.o', '*.exe', '*.bak',
    \ '.DS_Store', '*.pyc', '*.sw[po]',
    \ '.hg/', '.git/', '.bzr/', '.svn/',
    \ 'node_modules/', 'bower_components/', 'vendor/ruby',
    \ '.idea/', '.tags'])
  "}}}
  " https://qiita.com/hrsh7th@github/items/303d46ba13532c502828 {{{
  function! DeniteQfreplace(context)
    let qflist = []
    for target in a:context['targets']
      call add(qflist, {
        \ 'filename': target['action__path'],
        \ 'lnum': target['action__line'],
        \ 'text': target['word'],
      \ })
    endfor

    call setqflist(qflist)
    call qfreplace#start('tabnew')
  endfunction

  call denite#custom#action('file', 'qfreplace', function('DeniteQfreplace'))
  " }}}
'''
hook_add = '''
  let g:denite_cwd = ''
  nnoremap <silent> <SPACE>ds :<C-u>call SwitchMatherRegexp() <Bar> echo 'Changed mather to [regexp]'<CR>
  nnoremap <silent> <SPACE>dS :<C-u>call SwitchMatherFuzzy() <Bar> echo 'Changed mather to [fuzzy]'<CR>

  nnoremap <silent> <SPACE>dr :<C-u>call SwitchGrepCommand('pt') <Bar> echo 'Changed grep cmd to [pt]'<CR>
  nnoremap <silent> <SPACE>dR :<C-u>call SwitchGrepCommand('rg') <Bar> echo 'Changed grep cmd to [rg]'<CR>

  function! SwitchMatherRegexp() abort " {{{3
    call s:switchMather('matcher_regexp')
  endfunction

  function! SwitchMatherFuzzy() abort " {{{3
    call s:switchMather('matcher_fuzzy')
  endfunction

  function! s:switchMather(matcher) abort " {{{3
    let l:lists = [
      \ 'file_rec', 'file', 'buffer', 'file_mru',
      \ 'line', 'jump', 'change', 'tag', 'gitdiff_file', 'grep']

    for l:list in l:lists
      call denite#custom#source(l:list, 'matchers',
        \ [a:matcher, 'matcher_ignore_globs'])
    endfor

    call denite#custom#source('gitdiff_log', 'matchers', [a:matcher])
  endfunction

  function! SwitchGrepCommand(command) abort " {{{3
    if a:command ==# 'ag'
      call denite#custom#var('grep', 'command', ['ag'])
      call denite#custom#var('grep', 'default_opts',
          \ ['--vimgrep', '--follow', '--hidden', '-S'])
      call denite#custom#var('grep', 'recursive_opts', [])
      call denite#custom#var('grep', 'pattern_opt', [])
      call denite#custom#var('grep', 'separator', ['--'])
      call denite#custom#var('grep', 'final_opts', [])

      call denite#custom#var('file_rec', 'command',
        \ ['ag', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', ''])

    elseif a:command ==# 'jvgrep'
      call denite#custom#var('grep', 'command', ['jvgrep'])
      call denite#custom#var('grep', 'default_opts', ['-i'])
      call denite#custom#var('grep', 'recursive_opts', ['-R'])
      call denite#custom#var('grep', 'pattern_opt', [])
      call denite#custom#var('grep', 'separator', [])
      call denite#custom#var('grep', 'final_opts', [])

    elseif a:command ==# 'rg'
      call denite#custom#var('grep', 'command', ['rg'])
      call denite#custom#var('grep', 'default_opts',
          \ ['--vimgrep', '--follow', '--hidden', '-S'])
      call denite#custom#var('grep', 'recursive_opts', [])
      call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
      call denite#custom#var('grep', 'separator', ['--'])
      call denite#custom#var('grep', 'final_opts', [])

      call denite#custom#var('file_rec', 'command',
        \ ['rg', '--files', '--follow', '--hidden', '--no-heading'])

    elseif a:command ==# 'pt'
      call denite#custom#var('grep', 'command', ['pt'])
      call denite#custom#var('grep', 'default_opts',
          \ ['--nogroup', '--nocolor', '--follow', '--hidden', '-S'])
      call denite#custom#var('grep', 'recursive_opts', [])
      call denite#custom#var('grep', 'pattern_opt', ['-e'])
      call denite#custom#var('grep', 'separator', ['--'])
      call denite#custom#var('grep', 'final_opts', [])
        endif
      endfunction
  " }}}3
'''

# defx.nvim {{{2
[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
  augroup defx-custom
    autocmd!
    autocmd FileType defx call s:defx_my_settings()
  augroup END

	function! s:defx_my_settings() abort
    set signcolumn=no

	  " Define mappings
	  nnoremap <silent><buffer><expr> c defx#do_action('copy')
	  nnoremap <silent><buffer><expr> m defx#do_action('move')
	  nnoremap <silent><buffer><expr> p defx#do_action('paste')

	  nnoremap <silent><buffer><expr> <CR> defx#do_action('multi',
      \ [['call', 'DefxPreCommand'], ['drop']])
	  nnoremap <silent><buffer><expr> <C-M> defx#do_action('multi',
      \ [['call', 'DefxPreCommand'], ['drop']])
	  nnoremap <silent><buffer><expr> l defx#do_action('open_or_close_tree')
	  nnoremap <silent><buffer><expr> L defx#do_action('open')
	  nnoremap <silent><buffer><expr> h defx#do_action('cd', ['..'])
	  nnoremap <silent><buffer><expr> e defx#do_action('multi', 
      \ [['call', 'DefxPreCommand'], ['drop', 'vsplit']])
	  nnoremap <silent><buffer><expr> E defx#do_action('multi', 
      \ [['call', 'DefxPreCommand'], ['drop', 'split']])
	  nnoremap <silent><buffer><expr> t defx#do_action('multi', 
      \ [['call', 'DefxPreCommand'], ['drop', 'tabedit']])
	  nnoremap <silent><buffer><expr> P defx#do_action('open', 'pedit')
	  nnoremap <silent><buffer><expr> o defx#do_action('open_or_close_tree')

	  nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
	  nnoremap <silent><buffer><expr> N defx#do_action('new_file')
	  nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')
	  nnoremap <silent><buffer><expr> C
      \ defx#do_action('toggle_columns', 'mark:git:filename')

		" nnoremap <silent><buffer><expr> st defx#do_action('toggle_sort', 'time')
		" nnoremap <silent><buffer><expr> sf defx#do_action('toggle_sort', 'filename')
		" nnoremap <silent><buffer><expr> ss defx#do_action('toggle_sort', 'size')
		" nnoremap <silent><buffer><expr> se defx#do_action('toggle_sort', 'extension')

	  nnoremap <silent><buffer><expr> D defx#do_action('remove')
	  nnoremap <silent><buffer><expr> r defx#do_action('rename')
	  nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
	  nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
	  nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
	  nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
	  nnoremap <silent><buffer><expr> ; defx#do_action('repeat')
	  nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
	  nnoremap <silent><buffer><expr> q defx#do_action('quit')
	  nnoremap <silent><buffer><expr> <Space><Space> defx#do_action('toggle_select') . 'j'
	  nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
	  nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
	  nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
	  nnoremap <silent><buffer><expr> cd defx#do_action('change_vim_cwd')

		nnoremap <silent><buffer><expr> <SPACE>fg
      \ defx#do_action('call', 'DefxDeniteGrep')
		nnoremap <silent><buffer><expr> <SPACE>ff
      \ defx#do_action('call', 'DefxDeniteFile')
		nnoremap <silent><buffer><expr> ds
      \ defx#do_action('call', 'DefxSetDiffSource')
		nnoremap <silent><buffer><expr> dt
      \ defx#do_action('call', 'DefxSetDiffTarget')
		nnoremap <silent><buffer><expr> do
      \ defx#do_action('call', 'DefxOpenDiffDir')

    nmap <silent><buffer> <SPACE>gk <Plug>(defx-git-prev)
    nmap <silent><buffer> <SPACE>gj <Plug>(defx-git-next)

    " functions {{{
    function! DefxPreCommand(context) abort
      if a:context.buffer_name == 'defx-floating'
        quit
      elseif a:context.buffer_name == 'defx-tree'
        wincmd p
      endif
    endfunction

    function! DefxSetDiffSource(context) abort
      let g:defx_diff_source = a:context.targets[0]
      echo 'Set diff source:' g:defx_diff_source
    endfunction

    function! DefxSetDiffTarget(context) abort
      let g:defx_diff_target = a:context.targets[0]
      echo 'Set diff target:' g:defx_diff_target
    endfunction

    function! DefxOpenDiffDir(...) abort
      tabedit
      execute 'DirDiff' g:defx_diff_source g:defx_diff_target
    endfunction

		function! DefxDeniteGrep(context) abort
      call DefxPreCommand(a:context)
      let dirpath = fnamemodify(a:context.targets[0], ':p:h')
      exec 'Denite grep -no-empty -path=' . dirpath
		endfunction

		function! DefxDeniteFile(context) abort
      call DefxPreCommand(a:context)
      let dirpath = fnamemodify(a:context.targets[0], ':p:h')
      exec 'Denite file_rec -no-empty -mode=insert -path=' . dirpath
		endfunction
    " }}}

	endfunction

'''
hook_source = '''

	call defx#custom#option('_', {
    \ 'root_marker': ': ',
    \ 'buffer_name': 'defx',
    \ 'direction': 'topleft',
    \ 'split': 'vertical',
    \ 'columns': 'mark:git:filename:size:time',
    \ })
	call defx#custom#option('defx-floating', {
    \ 'split': 'floating',
    \ 'winrow': '1',
    \ 'winheight': &lines - 3,
    \ 'wincol': (&columns - 113) / 2,
    \ 'winwidth': '113',
    \ 'columns': 'mark:git:filename:size:time',
    \ })
	call defx#custom#option('defx-tree', {
    \ 'direction': 'topleft',
    \ 'split': 'vertical',
    \ 'winwidth': '35',
    \ 'columns': 'mark:git:filename',
    \ })

	call defx#custom#column('filename', {
    \ 'directory_icon': '',
    \ 'opened_icon': '',
    \ 'root_icon': '',
    \ 'min_width': '40',
    \ 'max_width': '80',
    \ })

'''

[[plugins]]
repo = 'kristijanhusak/defx-git'
on_source = 'defx.nvim'
hook_source = '''

  let g:defx_git#indicators = {
    \ 'Modified'  : '✹',
    \ 'Staged'    : '✚',
    \ 'Untracked' : '✭',
    \ 'Renamed'   : '➜',
    \ 'Unmerged'  : '═',
    \ 'Ignored'   : '☒',
    \ 'Deleted'   : '✖',
    \ 'Unknown'   : '?'
    \ }

  let g:defx_git#show_ignored = 1

'''

# [[plugins]]
# repo = 'kristijanhusak/defx-icons'
# on_source = 'defx.nvim'
# hook_source = '''
#
#   let g:defx_icons_enable_syntax_highlight = 0
#
# '''

# Shougo/deoplete.nvim {{{2
[[plugins]]
repo = 'Shougo/deoplete.nvim'
if ='''has('nvim')'''
on_event = 'InsertEnter'
hook_source = '''
  let g:deoplete#enable_at_startup  = 1
  set completeopt+=noinsert
  call deoplete#custom#source('buffer', 'min_pattern_length', 1)
  call deoplete#custom#source('tag', 'rank', 1)
  call deoplete#custom#source('_', 'matchers', ['matcher_fuzzy'])

  call deoplete#custom#var('omni', 'input_patterns', {
    \ 'stylus': ['\w+', '\w+[):; ]?\s+\w*', '[@!]'],
    \ 'vue':    ['\w+', '\w+[):;]?\s+\w*', '[@!]'],
    \ 'css':    ['\w+', '\w+[):;]?\s*\w*', '[@!]'],
  \ })

  call deoplete#custom#var('omni', 'functions', {
    \ 'stylus': ['stylcomplete#CompleteStyl'],
    \ 'css':    ['csscomplete#CompleteCSS'],
  \ })
'''

# ncm2/float-preview.nvim {{{2
[[plugins]]
repo = 'ncm2/float-preview.nvim'
on_source = 'deoplete.nvim'
hook_source = '''

  let g:float_preview#docked = 0
  let g:float_preview#max_width = 200
  let g:float_preview#max_height = 200

'''

# ujihisa/neco-look {{{2
[[plugins]]
repo = 'ujihisa/neco-look'
on_source = 'deoplete.nvim'
hook_source = '''
  call deoplete#custom#source('look', 'rank', 1)
'''

# SirVer/ultisnips {{{2
[[plugins]]
if = '''has('nvim')'''
repo = 'SirVer/ultisnips'
on_event = 'InsertEnter'
hook_add = '''
  let g:UltiSnipsExpandTrigger       = "<C-l>"
  let g:UltiSnipsJumpForwardTrigger  = "<C-i>"
  let g:UltiSnipsJumpBackwardTrigger = "<C-o>"
  let g:UltiSnipsSnippetsDir = g:dein_dir . "/repos/github.com/deresmos/vim-snippets/UltiSnips/"
'''

# elzr/vim-json {{{2
[[plugins]]
repo = 'elzr/vim-json'
if = '''has('nvim')'''
on_ft = 'json'
hook_source = '''
  let g:vim_json_syntax_conceal = 0
'''

# tpope/vim-endwise # {{{2
[[plugins]]
repo = 'tpope/vim-endwise'
if = '''has('nvim')'''
on_event = 'InsertEnter'

# metakirby5/codi.vim # {{{2
[[plugins]]
repo = 'metakirby5/codi.vim'
if = '''has('nvim')'''
on_ft = ['python', 'javascript', 'php']
hook_add = '''
  function! s:Codi(...) abort " {{{
    let edit = 'tabedit'
    if a:0 > 1
      let edit = a:2
    endif

    execute edit '$HOME/.scratch.' . a:1
    execute 'Codi'
  endfunction " }}}

  command! -nargs=? CodiPython     call s:Codi('py',  <f-args>)
  command! -nargs=? CodiJavaScript call s:Codi('js',  <f-args>)
  command! -nargs=? CodiPHP        call s:Codi('php', <f-args>)

  nnoremap <silent> <Space>mcip :CodiPython<CR>
  nnoremap <silent> <Space>mcij :CodiJavaScript<CR>
  nnoremap <silent> <Space>mcih :CodiPHP<CR>
'''
hook_source = '''
  augroup my_codi
    autocmd!
    autocmd FileType python,javascript,php nnoremap <buffer><silent> <Space>mcii :Codi<CR>
  augroup END
'''

# autozimu/LanguageClient-neovim # {{{2
[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
build = 'bash install.sh'
on_ft  = ['vue', 'javascript', 'python', 'php', 'css', 'sh']
hook_add = '''
  function! s:lsp()
    nnoremap <buffer><silent> <Space>mgg :call LanguageClient_textDocument_definition()<CR>
    nnoremap <buffer><silent> <Space>mr  :call LanguageClient_textDocument_rename()<CR>
    nnoremap <buffer><silent> <Space>md  :call LanguageClient_textDocument_hover()<CR>
    nnoremap <buffer><silent> <Space>mu  :call LanguageClient_textDocument_references()<CR>
  endfunction

  augroup my-lsp-cmd
    autocmd!
    autocmd FileType vue,javascript,python,php,css,sh :call s:lsp()
  augroup END
'''
hook_source = '''
  let g:LanguageClient_diagnosticsEnable = 0
  let g:LanguageClient_serverCommands = {
    \ 'vue': ['vls'],
    \ 'javascript': ['javascript-typescript-stdio'],
    \ 'python': ['pyls'],
    \ 'php': ['php', '~/.config/composer/php-language-server/bin/php-language-server.php'],
    \ 'css': ['css-languageserver', '--stdio'],
    \ 'sh': ['bash-language-server', 'start'],
  \ }
'''

# }}}1

# Markdown plugins {{{1
# godlygeek/tabular # {{{2
[[plugins]]
repo = 'godlygeek/tabular'
if = '''has('nvim')'''
on_ft = ['markdown','mkd']

# iamcco/markdown-preview.vim # {{{2
[[plugins]]
repo = 'iamcco/markdown-preview.vim'
if = '''has('nvim')'''
on_ft = ['markdown','mkd']
hook_source = '''
  let g:mkdp_path_to_chrome = "firefox"
'''

# plasticboy/vim-markdown # {{{2
[[plugins]]
repo = 'plasticboy/vim-markdown'
if = '''has('nvim')'''
on_ft = ['markdown','mkd']
hook_source = '''
  let g:vim_markdown_conceal = 0
  let g:vim_markdown_new_list_item_indent = 2
'''

# }}}1

# Python plugins {{{1
# zchee/deoplete-jedi {{{2
[[plugins]]
repo = 'zchee/deoplete-jedi'
if = '''has('nvim')'''
on_ft = 'python'
hook_source = '''
  let g:deoplete#sources#jedi#enable_cache   = 1
  let g:deoplete#sources#jedi#show_docstring = 0
'''

# davidhalter/jedi-vim {{{2
[[plugins]]
repo = 'davidhalter/jedi-vim'
if = '''has('nvim')'''
on_ft = 'python'
hook_source = '''
  let g:jedi#auto_initialization    = 1
  let g:jedi#auto_vim_configuration = 1
  let g:jedi#use_tabs_not_buffers   = 1
  let g:jedi#use_splits_not_buffers = "left"
  let g:jedi#popup_select_first     = 1
  let g:jedi#popup_on_dot           = 1
  let g:jedi#show_call_signatures   = 2

  let g:jedi#goto_assignments_command = "<SPACE>mgv"
  let g:jedi#documentation_command    = ""
  let g:jedi#usages_command           = ""

  augroup jedi-setting
    autocmd!
    autocmd FileType python setlocal completeopt-=preview
  augroup END
'''

# }}}1

# HTML / CSS plugins {{{1
# mattn/emmet-vim {{{2
[[plugins]]
repo = 'mattn/emmet-vim'
if = '''has('nvim')'''
on_ft = ['css', 'html', 'xhtml', 'php']
hook_source = '''
  let g:user_emmet_mode       = 'nv'
  let g:user_emmet_leader_key = '<c-y>'
'''

# gregsexton/MatchTag {{{2
[[plugins]]
repo = 'gregsexton/MatchTag'
if = '''has('nvim')'''
on_ft = ['html', 'xhtml']

# hail2u/vim-css3-syntax # {{{2
[[plugins]]
repo = 'hail2u/vim-css3-syntax'
if = '''has('nvim')'''
on_ft = 'css'

# vim-scripts/CSSMinister # {{{2
[[plugins]]
repo = 'vim-scripts/CSSMinister'
on_ft = 'css'
hook_add = '''
  nnoremap <SPACE>cth :<C-u>ToHex<CR>
  nnoremap <SPACE>ctr :<C-u>ToRGB<CR>
'''

# othree/html5.vim # {{{2
[[plugins]]
repo = 'othree/html5.vim'
if = '''has('nvim')'''
on_ft = 'html'

# pangloss/vim-javascript # {{{2
[[plugins]]
repo = 'pangloss/vim-javascript'
if = '''has('nvim')'''
on_ft = 'javascript'
hook_source = '''
  let g:javascript_plugin_jsdoc = 1
'''

# }}}1

# Go plugins {{{1
# fatih/vim-go # {{{2
[[plugins]]
repo = 'fatih/vim-go'
if = '''has('nvim')'''
on_ft = 'go'
hook_source = '''
  augroup vim-go-setting
    autocmd!
    autocmd FileType go setlocal completeopt-=preview
  augroup END

  let g:go_metalinter_autosave = 0
'''

# zchee/deoplete-go # {{{2
[[plugins]]
repo = 'zchee/deoplete-go'
if = '''has('nvim')'''
on_event = 'InsertEnter'
on_ft = 'go'

# }}}1

# PHP plugins {{{1
# padawan-php/deoplete-padawan # {{{2
[[plugins]]
repo = 'padawan-php/deoplete-padawan'
if = '''has('nvim')'''
on_event = 'InsertEnter'
on_ft = 'php'
hook_source = '''
  augroup padawan-setting
    autocmd! FileType php setlocal completeopt-=preview
  augroup END
'''

[[plugins]]
repo = 'joonty/vdebug.git'
if = '''has('python')'''
on_ft = ['php', 'python']
hook_source = '''
    let g:vdebug_options = {
      \ "port":          9001,
      \ "timeout":       60,
      \ "break_on_open": 1,
      \ "ide_key":       ''
    \ }

    let g:vdebug_keymap = {
      \ "run":               "<Space>dr",
      \ "run_to_cursor":     "<Space>dt",
      \ "step_over":         "<Space>dj",
      \ "step_into":         "<Space>di",
      \ "step_out":          "<Space>do",
      \ "close":             "<Space>dc",
      \ "detach":            "<Space>dd",
      \ "set_breakpoint":    "<Space>dp",
      \ "get_context":       "<Space>dg",
      \ "eval_under_cursor": "<Space>de",
      \ "eval_visual":       "<Space>dv",
    \ }
'''

# }}}1

# iloginow/vim-stylus # {{{1
[[plugins]]
repo = 'deresmos/vim-stylus'
on_ft = ['stylus', 'vue']
hook_source = '''
  let g:quickrun_config['stylus'] = {
    \ 'command': 'stylus', 'exec': ['%c < %s']
  \ }
'''

# osyo-manga/vim-precious # {{{1
[[plugins]]
repo = 'osyo-manga/vim-precious'
on_ft = ['vue', 'toml']
hook_source = '''
  let g:precious_enable_switch_CursorMoved_i = {'*': 0}
  let g:precious_enable_switch_CursorHold    = {'*': 0}
	let g:precious_enable_switchers = {
    \	'*':    {'setfiletype': 0},
    \	'toml': {'setfiletype': 1},
    \	'html': {'setfiletype': 1},
    \	'vue':  {'setfiletype': 1},
	\ }
'''
hook_post_source = '''
  augroup precious-augroup
    autocmd!
  augroup END
'''
hook_add = '''
  function! s:precious()
    augroup my-precious
      autocmd!
      autocmd CursorMoved <buffer> :PreciousSwitch
    augroup END

    omap <buffer> ic <Plug>(textobj-precious-i)
    vmap <buffer> ic <Plug>(textobj-precious-i)
    nmap <buffer><silent> <Space>mcC <Plug>(precious-quickrun-op)ic
  endfunction

  augroup my-precious-cmd
    autocmd!
    autocmd FileType vue,toml call s:precious()
    autocmd BufEnter,BufWinEnter *.vue,*.toml call s:precious()
  augroup END
'''

# hjson/vim-hjson # {{{1
[[plugins]]
repo = 'hjson/vim-hjson'
on_ft = ['hjson']

# Shougo/echodoc.vim # {{{1
[[plugins]]
repo = 'Shougo/echodoc.vim'
on_ft = ['python']
hook_add = '''
  let g:echodoc#enable_at_startup = 1
'''

# Shougo/neco-vim # {{{1
[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'
on_source = 'deoplete.nvim'

# rhysd/git-messenger.vim # {{{1
[[plugins]]
repo = 'rhysd/git-messenger.vim'
on_cmd = 'GitMessenger'
on_map = '<Plug>(git-messenger'
hook_add = '''

  nmap <SPACE>gid <Plug>(git-messenger)
  nmap <SPACE>giD <Plug>(git-messenger-into-popup)

'''
hook_post_source = '''

  highlight link gitmessengerPopupNormal NormalFloat

'''

# Shougo/deol {{{1
[[plugins]]
repo = 'Shougo/deol.nvim'
on_cmd = 'Deol'
hook_add = '''
  
  nnoremap <silent> <SPACE>ttt :<C-u>call <SID>DeolFloating()<CR>

  function! s:DeolFloating() abort
    exec 'Deol -split=floating'
      \ '-winrow=1 -winheight=' . string(&lines * 0.8)
      \ '-wincol=1 -winwidth=' . string(&columns)
  endfunction


'''
