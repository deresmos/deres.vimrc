# common plugins {{{1
# Shougo/neomru.vim {{{2
[[plugins]]
repo = 'Shougo/neomru.vim'

# Shougo/neoyank.vim {{{2
[[plugins]]
repo = 'Shougo/neoyank.vim'

# Shougo/denite.nvim {{{2
[[plugins]]
repo = 'Shougo/denite.nvim'
if = '''has('python3')'''
depends = ['neomru.vim', 'neoyank.vim']
hook_source = '''
" custom mapping {{{
	call denite#custom#map(
		\ 'insert',
		\ '<C-j>',
		\ '<denite:move_to_next_line>',
		\ 'noremap')

	call denite#custom#map(
	 \ 'insert',
	 \ '<C-k>',
	 \ '<denite:move_to_previous_line>',
	 \ 'noremap')

	call denite#custom#map(
	 \ 'insert',
	 \ '<C-l>',
	 \ '<denite:do_action:preview>',
	 \ 'noremap')

	call denite#custom#map(
	 \ 'insert',
	 \ '<C-a>',
	 \ '<denite:move_caret_to_head>',
	 \ 'noremap')

	call denite#custom#map(
	 \ 'insert',
	 \ '<C-e>',
	 \ '<denite:move_caret_to_tail>',
	 \ 'noremap')

	call denite#custom#map(
	 \ 'insert',
	 \ '<C-t>',
	 \ '<denite:do_action:tabopen>',
	 \ 'noremap')

	call denite#custom#map(
	 \ 'insert',
	 \ '<C-s>',
	 \ '<denite:do_action:split>',
	 \ 'noremap')

	call denite#custom#map(
	 \ 'insert',
	 \ '<C-v>',
	 \ '<denite:do_action:vsplit>',
	 \ 'noremap')
" }}}

" custom color {{{
call denite#custom#option('default', 'highlight_matched_char', 'Title')
call denite#custom#option('default', 'highlight_mode_insert', 'PmenuSel')
" }}}

" custom command {{{
if executable('ag')
	call denite#custom#var('grep', 'command',        ['ag'])
	call denite#custom#var('grep', 'recursive_opts', [])
	call denite#custom#var('grep', 'pattern_opt',    [])
	call denite#custom#var('grep', 'default_opts',   ['--follow', '--no-group', '--no-color', '--hidden'])

	call denite#custom#var('file_rec', 'command',
	\ ['ag', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', ''])
endif
"}}}

let s:menus = {}
let s:menus.zsh = { 'description': 'zsh configuration' }
let s:menus.zsh.file_candidates = [
\ ['zshrc', '~/.zshrc']]
let s:menus.my_commands = { 'description': 'my commands' }
let s:menus.my_commands.command_candidates = [
\ ['Split the window', 'vnew'], ['Open zsh menu', 'Denite menu:zsh']]
call denite#custom#var('menu', 'menus', s:menus)
'''

# }}}1 END common plugins

# neovim plugins {{{1
# Shougo/deoplete.nvim {{{2
[[plugins]]
repo = 'Shougo/deoplete.nvim'
if ='''has('nvim')'''
on_i = 1
hook_source = '''
	let g:deoplete#enable_at_startup = 1
	let g:deoplete#auto_completion_start_length = 1
	let g:deoplete#enable_ignore_case = 1
	let g:deoplete#enable_smart_case = 1
'''

# szw/vim-tags {{{2
[[plugins]]
repo = 'szw/vim-tags'
if ='''has('nvim')'''
hook_source = '''
	set tags=./tags;
'''

# w0rp/ale {{{2
[[plugins]]
repo = 'w0rp/ale'
if ='''has('nvim')'''
hook_source = '''
	let g:ale_sign_column_always = 1
	let g:ale_lint_on_text_changed = 1
	let g:ale_sign_column_always = 1
	let g:ale_set_loclist = 1
	let g:ale_set_quickfix = 0
	let g:ale_sign_error = '!!'
	let g:ale_sign_warning = '??'
	let g:ale_echo_msg_error_str = 'E'
	let g:ale_echo_msg_warning_str = 'W'
	let g:ale_echo_msg_format = '%s [%severity%] | %linter%'
	let g:ale_statusline_format = ['E%d', 'W%d', 'OK']
	nmap <silent> <C-j> <Plug>(ale_next_wrap)
	nmap <silent> <C-k> <Plug>(ale_previous_wrap)
	let g:ale_linters = {
		\ 'python': ['flake8'],
		\ 'javascript': ['jshint'],
		\ }
	"let g:ale_python_pylint_args="--disable=C0111"
	highlight link ALEWarningSign SpellCap
'''

# zchee/deoplete-jedi {{{2
[[plugins]]
repo = 'zchee/deoplete-jedi'
if = '''has('nvim')'''
on_i = 1
on_ft = 'python'
hook_source = '''
	let g:deoplete#sources#jedi#enable_cache = 1
	let g:deoplete#sources#jedi#show_docstring = 0
'''

# davidhalter/jedi-vim {{{2
[[plugins]]
repo = 'davidhalter/jedi-vim'
if = '''has('nvim')'''
on_i = 1
on_ft = 'python'
hook_source = '''
	let g:jedi#auto_initialization = 1
	let g:jedi#auto_vim_configuration = 1
	let g:jedi#use_tabs_not_buffers = 1
	let g:jedi#use_splits_not_buffers = "left"
	let g:jedi#popup_select_first = 1
	let g:jedi#popup_on_dot = 1
	let g:jedi#show_call_signatures = 2
	let g:jedi#goto_assignments_command = "<SPACE>mgv"
	let g:jedi#goto_command = "<SPACE>mgg"
	let g:jedi#documentation_command = "<SPACE>mgd" 
	let g:jedi#rename_command = "<SPACE>mr" 
	let g:jedi#usages_command = "<SPACE>mu" 
'''

# mattn/emmet-vim {{{2
[[plugins]]
repo = 'mattn/emmet-vim'
if = '''has('nvim')'''
on_ft = ['css', 'html', 'php']
hook_source = '''
	let g:user_emmet_mode='nv'
	let g:user_emmet_leader_key='<C-y>'
'''

# Chiel92/vim-autoformat {{{2
[[plugins]]
repo = 'Chiel92/vim-autoformat'
if = '''has('nvim')'''
on_ft = ['python', 'c', 'cpp', 'css', 'html', 'php', 'javascript']
hook_source = '''
	let g:formatter_yapf_style = 'pep8'
'''

# thinca/vim-quickrun {{{2
[[plugins]]
repo = 'thinca/vim-quickrun'
if = '''has('nvim')'''
hook_source = '''
let g:quickrun_config={'_': {'split': ''}}
let g:quickrun_config._={
	\ 'hook/time/enable': '1',
	\ 'runner'    : 'vimproc',
	\ 'runner/vimproc/updatetime' : 60,
	\ 'outputter' : 'error',
	\ 'outputter/error/success' : 'buffer',
	\ 'outputter/error/error'   : 'quickfix',
	\ 'outputter/buffer/split'  : ':botright 6sp',
	\ 'outputter/buffer/close_on_empty' : 1,
	\ 'outputter/buffer/running_mark': ''
\ }
'''

# chrisbra/colorizer {{{2
[[plugins]]
repo = 'chrisbra/colorizer'
if = '''has('nvim')'''
hook_add = '''
	let g:colorizer_auto_filetype = 'css,html'
	let g:colorizer_skip_comments = 1
	let g:colorizer_auto_filetype = 'css,html'
	let g:colorizer_auto_color    = 1
'''

# honza/vim-snippets {{{2
[[plugins]]
if = '''has('nvim')'''
repo = 'honza/vim-snippets'

# SirVer/ultisnips {{{2
[[plugins]]
if = '''has('nvim')'''
repo = 'SirVer/ultisnips'
on_i = 1
hook_add = '''
let g:UltiSnipsExpandTrigger="<C-l>"
let g:UltiSnipsJumpForwardTrigger="<C-j>"
let g:UltiSnipsJumpBackwardTrigger="<C-k>"
let g:UltiSnipsSnippetsDir = "~/.vim/snips"
'''

# iamcco/markdown-preview.vim # {{{2
[[plugins]]
repo = 'iamcco/markdown-preview.vim'
if = '''has('nvim')'''
on_ft = ['markdown','mkd']
hook_source = '''
	let g:mkdp_path_to_chrome = "firefox"
''' 

# godlygeek/tabular # {{{2
[[plugins]]
repo = 'godlygeek/tabular'
if = '''has('nvim')'''
on_ft = ['markdown','mkd']

# plasticboy/vim-markdown # {{{2
[[plugins]]
repo = 'plasticboy/vim-markdown'
if = '''has('nvim')'''
on_ft = ['markdown','mkd']
hook_source = '''
	let g:vim_markdown_conceal = 0
	let g:vim_markdown_new_list_item_indent = 2
'''

# hail2u/vim-css3-syntax # {{{2
[[plugins]]
repo = 'hail2u/vim-css3-syntax'
if = '''has('nvim')'''
on_ft = 'css'

# othree/html5.vim # {{{2
[[plugins]]
repo = 'othree/html5.vim'
if = '''has('nvim')'''
on_ft = 'html'
# }}}1 END neovim plugins

# vim plugins {{{1
# Shougo/neocomplete.vim {{{2
[[plugins]]
repo = 'Shougo/neocomplete.vim'
if = '''!has('nvim')'''
on_i = 1
hook_source = '''
	" Disable AutoComplPop.
	let g:acp_enableAtStartup = 0
	" Use neocomplete.
	let g:neocomplete#enable_at_startup = 1
	" Use smartcase.
	let g:neocomplete#enable_smart_case = 1
	let g:neocomplete#enable_underbar_completion = 1
	let g:neocomplete#enable_camel_case_completion = 1
	" Set minimum syntax keyword length.
	let g:neocomplete#sources#syntax#min_keyword_length = 2
	let g:neocomplete#max_list = 10
	let g:neocomplete#auto_completion_start_length = 1

	" Define dictionary.
	let g:neocomplete#sources#dictionary#dictionaries = {
		\ 'default' : '',
		\ }

		" Define keyword.
		if !exists('g:neocomplete#keyword_patterns')
		let g:neocomplete#keyword_patterns = {}
		endif
		let g:neocomplete#keyword_patterns['default'] = '\h\w*'

	" Plugin key-mappings.
	inoremap <expr><C-g>     neocomplete#undo_completion()
	inoremap <expr><C-l>     neocomplete#complete_common_string()

	" Recommended key-mappings.
	" <CR>: close popup and save indent.
	inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
	function! s:my_cr_function()
	return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
	" For no inserting <CR> key.
	"return pumvisible() ? "\<C-y>" : "\<CR>"
	endfunction
	" <TAB>: completion.
	inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
	" <C-h>, <BS>: close popup and delete backword char.
	inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
	"inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
	" Close popup by <Space>.
	"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

	" AutoComplPop like behavior.
	"let g:neocomplete#enable_auto_select = 1

	" Shell like behavior(not recommended).
	"set completeopt+=longest
	"let g:neocomplete#enable_auto_select = 1
	"let g:neocomplete#disable_auto_complete = 1
	"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

	" Enable omni completion.
	autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
	autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
	autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
	autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
	autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

	" Enable heavy omni completion.
	if !exists('g:neocomplete#sources#omni#input_patterns')
	let g:neocomplete#sources#omni#input_patterns = {}
	endif
	"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
	"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
	"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

	" For perlomni.vim setting.
	" https://github.com/c9s/perlomni.vim
	"let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
'''
# }}}1 END vim plugins
