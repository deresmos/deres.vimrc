# common plugins {{{1
# Shougo/neomru.vim {{{2
[[plugins]]
repo = 'Shougo/neomru.vim'

# Shougo/neoyank.vim {{{2
[[plugins]]
repo = 'Shougo/neoyank.vim'

# Shougo/denite.nvim {{{2
[[plugins]]
repo = 'Shougo/denite.nvim'
if = '''has('python3')'''
depends = ['neomru.vim', 'neoyank.vim']
hook_source = '''
  call denite#custom#option('default', 'prompt', '>')

  " custom mapping {{{
  call denite#custom#map(
    \ 'insert',
    \ '<C-j>',
    \ '<denite:move_to_next_line>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-k>',
    \ '<denite:move_to_previous_line>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-n>',
    \ '../',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-p>',
    \ '<denite:do_action:preview>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-a>',
    \ '<denite:move_caret_to_head>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-e>',
    \ '<denite:move_caret_to_tail>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-t>',
    \ '<denite:do_action:tabopen>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-s>',
    \ '<denite:do_action:split>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-v>',
    \ '<denite:do_action:vsplit>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ 'fd',
    \ '<denite:leave_mode>',
    \ 'noremap')
  " }}}

  " custom color {{{
  call denite#custom#option('default', 'highlight_matched_char', 'Search')
  call denite#custom#option('default', 'highlight_mode_insert', 'DeniteCursorLine')
  call denite#custom#option('default', 'highlight_mode_normal', 'DeniteCursorLine')
  " }}}

  " custom command {{{
  if executable('rg')
    call SwitchGrepCommand('rg')
  elseif executable('pt')
    call SwitchGrepCommand('pt')
  endif

  call SwitchMatherFuzzy()

  call denite#custom#source('file_rec', 'matchers',
    \ ['matcher_fuzzy', 'matcher_ignore_globs'])
  call denite#custom#source('file', 'matchers',
    \ ['matcher_fuzzy', 'matcher_ignore_globs'])

  call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
    \ [ '*~', '*.o', '*.exe', '*.bak',
    \ '.DS_Store', '*.pyc', '*.sw[po]',
    \ '.hg/', '.git/', '.bzr/', '.svn/',
    \ 'node_modules/', 'bower_components/', 'vendor/ruby',
    \ '.idea/'])
  "}}}
'''
hook_add = '''
  let g:denite_cwd = ''
  nnoremap <silent> <SPACE>ds :call SwitchMatherRegexp() <Bar> echo 'Changed mather to [regexp]'<CR>
  nnoremap <silent> <SPACE>dS :call SwitchMatherFuzzy() <Bar> echo 'Changed mather to [fuzzy]'<CR>

  nnoremap <silent> <SPACE>dr :call SwitchGrepCommand('pt') <Bar> echo 'Changed grep cmd to [pt]'<CR>
  nnoremap <silent> <SPACE>dR :call SwitchGrepCommand('rg') <Bar> echo 'Changed grep cmd to [rg]'<CR>

  function! SwitchMatherRegexp() abort " {{{3
    call s:switchMather('matcher_regexp')
  endfunction

  function! SwitchMatherFuzzy() abort " {{{3
    call s:switchMather('matcher_fuzzy')
  endfunction

  function! s:switchMather(matcher) abort " {{{3
    let l:lists = [
      \ 'file_rec', 'file', 'buffer', 'file_mru',
      \ 'line', 'jump', 'change', 'tag']

    for l:list in l:lists
      call denite#custom#source(l:list, 'matchers',
        \ [a:matcher, 'matcher_ignore_globs'])
    endfor
  endfunction

  function! SwitchGrepCommand(command) abort " {{{3
    if a:command ==# 'ag'
      call denite#custom#var('grep', 'command', ['ag'])
      call denite#custom#var('grep', 'default_opts',
          \ ['--vimgrep', '--follow', '--hidden', '-S'])
      call denite#custom#var('grep', 'recursive_opts', [])
      call denite#custom#var('grep', 'pattern_opt', [])
      call denite#custom#var('grep', 'separator', ['--'])
      call denite#custom#var('grep', 'final_opts', [])

      call denite#custom#var('file_rec', 'command',
        \ ['ag', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', ''])

    elseif a:command ==# 'jvgrep'
      call denite#custom#var('grep', 'command', ['jvgrep'])
      call denite#custom#var('grep', 'default_opts', ['-i'])
      call denite#custom#var('grep', 'recursive_opts', ['-R'])
      call denite#custom#var('grep', 'pattern_opt', [])
      call denite#custom#var('grep', 'separator', [])
      call denite#custom#var('grep', 'final_opts', [])

    elseif a:command ==# 'rg'
      call denite#custom#var('grep', 'command', ['rg'])
      call denite#custom#var('grep', 'default_opts',
          \ ['--vimgrep', '--follow', '--hidden', '-S'])
      call denite#custom#var('grep', 'recursive_opts', [])
      call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
      call denite#custom#var('grep', 'separator', ['--'])
      call denite#custom#var('grep', 'final_opts', [])

      call denite#custom#var('file_rec', 'command',
        \ ['rg', '--files', '--follow', '--hidden', '--no-heading'])

    elseif a:command ==# 'pt'
      call denite#custom#var('grep', 'command', ['pt'])
      call denite#custom#var('grep', 'default_opts',
          \ ['--nogroup', '--nocolor', '--follow', '--hidden', '-S'])
      call denite#custom#var('grep', 'recursive_opts', [])
      call denite#custom#var('grep', 'pattern_opt', [])
      call denite#custom#var('grep', 'separator', ['--'])
      call denite#custom#var('grep', 'final_opts', [])
        endif
      endfunction
  " }}}3
'''

# Shougo/deoplete.nvim {{{2
[[plugins]]
repo = 'Shougo/deoplete.nvim'
if ='''has('nvim')'''
on_i = 1
hook_source = '''
  let g:deoplete#enable_at_startup  = 1
  let g:deoplete#enable_ignore_case = 1
  let g:deoplete#enable_smart_case  = 1
  let g:deoplete#tag#cache_limit_size = 0
  let g:deoplete#max_list = 15
  let g:deoplete#file#enable_buffer_path = 1

  call deoplete#custom#set('buffer', 'min_pattern_length', 1)
  call deoplete#custom#source('tag', 'rank', 1000)
  call deoplete#custom#set('_', 'matchers', ['matcher_fuzzy'])
'''

# elzr/vim-json {{{2
[[plugins]]
repo = 'elzr/vim-json'
if = '''has('nvim')'''
on_ft = 'json'

# tpope/vim-endwise # {{{2
[[plugins]]
repo = 'tpope/vim-endwise'
if = '''has('nvim')'''
on_i = 1

# }}}1

# Markdown plugins {{{1
# godlygeek/tabular # {{{2
[[plugins]]
repo = 'godlygeek/tabular'
if = '''has('nvim')'''
on_ft = ['markdown','mkd']

# iamcco/markdown-preview.vim # {{{2
[[plugins]]
repo = 'iamcco/markdown-preview.vim'
if = '''has('nvim')'''
on_ft = ['markdown','mkd']
hook_source = '''
  let g:mkdp_path_to_chrome = "firefox"
'''

# plasticboy/vim-markdown # {{{2
[[plugins]]
repo = 'plasticboy/vim-markdown'
if = '''has('nvim')'''
on_ft = ['markdown','mkd']
hook_source = '''
  let g:vim_markdown_conceal = 0
  let g:vim_markdown_new_list_item_indent = 2
'''

# }}}1

# Python plugins {{{1
# zchee/deoplete-jedi {{{2
[[plugins]]
repo = 'zchee/deoplete-jedi'
if = '''has('nvim')'''
on_i = 1
on_ft = 'python'
hook_source = '''
  let g:deoplete#sources#jedi#enable_cache   = 1
  let g:deoplete#sources#jedi#show_docstring = 0
'''

# davidhalter/jedi-vim {{{2
[[plugins]]
repo = 'davidhalter/jedi-vim'
if = '''has('nvim')'''
on_i = 1
on_ft = 'python'
hook_source = '''
  let g:jedi#auto_initialization    = 1
  let g:jedi#auto_vim_configuration = 1
  let g:jedi#use_tabs_not_buffers   = 1
  let g:jedi#use_splits_not_buffers = "left"
  let g:jedi#popup_select_first     = 1
  let g:jedi#popup_on_dot           = 1
  let g:jedi#show_call_signatures   = 2

  let g:jedi#goto_assignments_command = "<SPACE>mgv"
  let g:jedi#goto_command             = "<SPACE>mgg"
  let g:jedi#documentation_command    = "<SPACE>md"
  let g:jedi#rename_command           = "<SPACE>mr"
  let g:jedi#usages_command           = "<SPACE>mu"

  augroup jedi-setting
    autocmd!
    autocmd FileType python setlocal completeopt-=preview
  augroup END
'''

# }}}1

# HTML / CSS plugins {{{1
# mattn/emmet-vim {{{2
[[plugins]]
repo = 'mattn/emmet-vim'
if = '''has('nvim')'''
on_ft = ['css', 'html', 'xhtml', 'php']
hook_source = '''
  let g:user_emmet_mode       = 'nv'
  let g:user_emmet_leader_key = '<c-y>'
'''

# gregsexton/MatchTag {{{2
[[plugins]]
repo = 'gregsexton/MatchTag'
if = '''has('nvim')'''
on_ft = ['html', 'xhtml']

# chrisbra/colorizer {{{2
[[plugins]]
repo = 'chrisbra/colorizer'
if = '''has('nvim')'''
on_ft = ['css', 'html', 'xhtml']
hook_source = '''
  let g:colorizer_skip_comments = 1
  let g:colorizer_auto_color    = 0

  augroup colorizer-setting
    autocmd!

    autocmd FileType css,html,xhtml nnoremap  <buffer><silent> <SPACE>tcc :ColorToggle<CR>
  augroup END
'''

# hail2u/vim-css3-syntax # {{{2
[[plugins]]
repo = 'hail2u/vim-css3-syntax'
if = '''has('nvim')'''
on_ft = 'css'

# vim-scripts/CSSMinister # {{{2
[[plugins]]
repo = 'vim-scripts/CSSMinister'
on_ft = 'css'
hook_add = '''
  nnoremap <SPACE>cth :ToHex<CR>
  nnoremap <SPACE>ctr :ToRGB<CR>
'''

# othree/html5.vim # {{{2
[[plugins]]
repo = 'othree/html5.vim'
if = '''has('nvim')'''
on_ft = 'html'

# pangloss/vim-javascript # {{{2
[[plugins]]
repo = 'pangloss/vim-javascript'
if = '''has('nvim')'''
on_ft = 'javascript'
hook_source = '''
  let g:javascript_plugin_jsdoc = 1
'''

# }}}1

# Go plugins {{{1
# fatih/vim-go # {{{2
[[plugins]]
repo = 'fatih/vim-go'
if = '''has('nvim')'''
on_ft = 'go'
hook_source = '''
  augroup vim-go-setting
    autocmd!
    autocmd FileType go setlocal completeopt-=preview
  augroup END
'''

# zchee/deoplete-go # {{{2
[[plugins]]
repo = 'zchee/deoplete-go'
if = '''has('nvim')'''
on_i = 1
on_ft = 'go'

# }}}1

# PHP plugins {{{1
# padawan-php/deoplete-padawan # {{{2
[[plugins]]
repo = 'padawan-php/deoplete-padawan'
if = '''has('nvim')'''
on_i = 1
on_ft = 'php'
hook_source = '''
  augroup padawan-setting
    autocmd! FileType php setlocal completeopt-=preview
  augroup END
'''

[[plugins]]
repo = 'joonty/vdebug.git'
if = '''has('python')'''
on_ft = ['php', 'python']
hook_source = '''
    let g:vdebug_options = {
      \ "port":          9001,
      \ "timeout":       60,
      \ "break_on_open": 1,
      \ "ide_key":       ''
    \ }

    let g:vdebug_keymap = {
      \ "run":               "<Space>dr",
      \ "run_to_cursor":     "<Space>dt",
      \ "step_over":         "<Space>dj",
      \ "step_into":         "<Space>di",
      \ "step_out":          "<Space>do",
      \ "close":             "<Space>dc",
      \ "detach":            "<Space>dd",
      \ "set_breakpoint":    "<Space>dp",
      \ "get_context":       "<Space>dg",
      \ "eval_under_cursor": "<Space>de",
      \ "eval_visual":       "<Space>dv",
    \ }
'''

# }}}1

# JavaScript plugins {{{1
# carlitux/deoplete-ternjs {{{2
[[plugins]]
repo = 'carlitux/deoplete-ternjs'
if = '''has('nvim')'''
on_i = 1
on_ft = 'javascript'
hook_add = '''
  let g:tern_request_timeout       = 1
  let g:tern_show_signature_in_pum = '0'

  augroup ternjs-setting
    autocmd!
    autocmd FileType javascript setlocal completeopt-=preview
  augroup END
'''

# ternjs/tern_for_vim {{{2
[[plugins]]
repo = 'ternjs/tern_for_vim'
if = '''has('nvim')'''
on_ft = 'javascript'


# }}}1
