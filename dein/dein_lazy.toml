# common plugins {{{1
# rafi/vim-denite-session {{{2
[[plugins]]
repo = 'rafi/vim-denite-session'
on_source = 'denite.nvim'
hook_source = '''
  call denite#custom#var('session', 'path', g:startify_session_dir)
'''

# deresmos/denite-gitdiff {{{2
[[plugins]]
repo = 'deresmos/denite-gitdiff'
on_source = 'denite.nvim'

# deresmos/denite-gitdiff {{{2
[[plugins]]
repo = 'iyuuya/denite-ale'
on_source = 'denite.nvim'

# Shougo/denite.nvim {{{2
[[plugins]]
repo = 'Shougo/denite.nvim'
if = '''has('python3')'''
hook_source = '''
  call denite#custom#option('default', 'prompt', '>')

  " custom mapping {{{
  call denite#custom#map(
    \ 'normal',
    \ 'l',
    \ '<denite:do_action:default>',
    \ 'noremap')

  call denite#custom#map(
    \ 'normal',
    \ 'h',
    \ '<denite:restore_sources>',
    \ 'noremap')

  call denite#custom#map(
    \ 'normal',
    \ 'gj',
    \ '<denite:jump_to_next_by:path>',
    \ 'noremap')

  call denite#custom#map(
    \ 'normal',
    \ 'gk',
    \ '<denite:jump_to_previous_by:path>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-j>',
    \ '<denite:move_to_next_line>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-k>',
    \ '<denite:move_to_previous_line>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-n>',
    \ '../',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-p>',
    \ '<denite:do_action:preview>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-a>',
    \ '<denite:move_caret_to_head>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-e>',
    \ '<denite:move_caret_to_tail>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-t>',
    \ '<denite:do_action:tabopen>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-s>',
    \ '<denite:do_action:split>',
    \ 'noremap')

  call denite#custom#map(
    \ 'normal',
    \ 's',
    \ '<denite:do_action:split>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-v>',
    \ '<denite:do_action:vsplit>',
    \ 'noremap')

  call denite#custom#map(
    \ 'normal',
    \ 'v',
    \ '<denite:do_action:vsplit>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ 'fd',
    \ '<denite:enter_mode:normal>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-d><C-t>',
    \ '<denite:do_action:tabvdiff>',
    \ 'noremap')

  call denite#custom#map(
    \ 'normal',
    \ 'dt',
    \ '<denite:do_action:tabvdiff>',
    \ 'noremap')

  call denite#custom#map(
    \ 'normal',
    \ 'dlt',
    \ '<denite:do_action:tabvdiff_local>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-d><C-m>',
    \ '<denite:do_action:openvdiff>',
    \ 'noremap')

  call denite#custom#map(
    \ 'normal',
    \ 'dm',
    \ '<denite:do_action:openvdiff>',
    \ 'noremap')

  call denite#custom#map(
    \ 'normal',
    \ 'dlm',
    \ '<denite:do_action:openvdiff_local>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-f><C-m>',
    \ '<denite:do_action:branch_log>',
    \ 'noremap')

  call denite#custom#map(
    \ 'normal',
    \ 'fm',
    \ '<denite:do_action:branch_log>',
    \ 'noremap')

  call denite#custom#map(
    \ 'insert',
    \ '<C-d><C-d>',
    \ '<denite:do_action:delete>',
    \ 'noremap')

  call denite#custom#map(
    \ 'normal',
    \ 'dd',
    \ '<denite:do_action:delete>',
    \ 'noremap')

  call denite#custom#map(
    \ 'normal',
    \ 'rp',
    \ '<denite:do_action:qfreplace>',
    \ 'noremap')

  " }}}

  " custom color {{{
  call denite#custom#option('default', 'highlight_matched_char', 'Search')
  call denite#custom#option('default', 'highlight_mode_insert', 'DeniteCursorLine')
  call denite#custom#option('default', 'highlight_mode_normal', 'DeniteCursorLine')
  call denite#custom#option('default', 'mode', 'normal')
  " }}}

  " custom command {{{
  if executable('rg')
    call SwitchGrepCommand('rg')
  elseif executable('pt')
    call SwitchGrepCommand('pt')
  endif

  call SwitchMatherFuzzy()

  call denite#custom#source('file_rec', 'matchers',
    \ ['matcher_fuzzy', 'matcher_ignore_globs'])
  call denite#custom#source('file', 'matchers',
    \ ['matcher_fuzzy', 'matcher_ignore_globs'])

  call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
    \ [ '*~', '*.o', '*.exe', '*.bak',
    \ '.DS_Store', '*.pyc', '*.sw[po]',
    \ '.hg/', '.git/', '.bzr/', '.svn/',
    \ 'node_modules/', 'bower_components/', 'vendor/ruby',
    \ '.mypy_cache/',
    \ '.idea/', '.tags'])
  "}}}
  " https://qiita.com/hrsh7th@github/items/303d46ba13532c502828 {{{
  function! DeniteQfreplace(context)
    let qflist = []
    for target in a:context['targets']
      call add(qflist, {
        \ 'filename': target['action__path'],
        \ 'lnum': target['action__line'],
        \ 'text': target['word'],
      \ })
    endfor

    call setqflist(qflist)
    call qfreplace#start('tabnew')
  endfunction

  call denite#custom#action('file', 'qfreplace', function('DeniteQfreplace'))
  " }}}
'''
hook_add = '''
  let g:denite_cwd = ''
  nnoremap <silent> <SPACE>ds :<C-u>call SwitchMatherRegexp() <Bar> echo 'Changed mather to [regexp]'<CR>
  nnoremap <silent> <SPACE>dS :<C-u>call SwitchMatherFuzzy() <Bar> echo 'Changed mather to [fuzzy]'<CR>

  nnoremap <silent> <SPACE>dr :<C-u>call SwitchGrepCommand('pt') <Bar> echo 'Changed grep cmd to [pt]'<CR>
  nnoremap <silent> <SPACE>dR :<C-u>call SwitchGrepCommand('rg') <Bar> echo 'Changed grep cmd to [rg]'<CR>

  function! SwitchMatherRegexp() abort " {{{3
    call s:switchMather('matcher_regexp')
  endfunction

  function! SwitchMatherFuzzy() abort " {{{3
    call s:switchMather('matcher_fuzzy')
  endfunction

  function! s:switchMather(matcher) abort " {{{3
    let l:lists = [
      \ 'file_rec', 'file', 'buffer', 'file_mru',
      \ 'line', 'jump', 'change', 'tag', 'gitdiff_file', 'grep']

    for l:list in l:lists
      call denite#custom#source(l:list, 'matchers',
        \ [a:matcher, 'matcher_ignore_globs'])
    endfor

    call denite#custom#source('gitdiff_log', 'matchers', [a:matcher])
  endfunction

  function! SwitchGrepCommand(command) abort " {{{3
    if a:command ==# 'ag'
      call denite#custom#var('grep', 'command', ['ag'])
      call denite#custom#var('grep', 'default_opts',
          \ ['--vimgrep', '--follow', '--hidden', '-S'])
      call denite#custom#var('grep', 'recursive_opts', [])
      call denite#custom#var('grep', 'pattern_opt', [])
      call denite#custom#var('grep', 'separator', ['--'])
      call denite#custom#var('grep', 'final_opts', [])

      call denite#custom#var('file_rec', 'command',
        \ ['ag', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', ''])

    elseif a:command ==# 'jvgrep'
      call denite#custom#var('grep', 'command', ['jvgrep'])
      call denite#custom#var('grep', 'default_opts', ['-i'])
      call denite#custom#var('grep', 'recursive_opts', ['-R'])
      call denite#custom#var('grep', 'pattern_opt', [])
      call denite#custom#var('grep', 'separator', [])
      call denite#custom#var('grep', 'final_opts', [])

    elseif a:command ==# 'rg'
      call denite#custom#var('grep', 'command', ['rg'])
      call denite#custom#var('grep', 'default_opts',
          \ ['--vimgrep', '--follow', '--hidden', '-S'])
      call denite#custom#var('grep', 'recursive_opts', [])
      call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
      call denite#custom#var('grep', 'separator', ['--'])
      call denite#custom#var('grep', 'final_opts', [])

      call denite#custom#var('file_rec', 'command',
        \ ['rg', '--files', '--follow', '--hidden', '--no-heading'])

    elseif a:command ==# 'pt'
      call denite#custom#var('grep', 'command', ['pt'])
      call denite#custom#var('grep', 'default_opts',
          \ ['--nogroup', '--nocolor', '--follow', '--hidden', '-S'])
      call denite#custom#var('grep', 'recursive_opts', [])
      call denite#custom#var('grep', 'pattern_opt', ['-e'])
      call denite#custom#var('grep', 'separator', ['--'])
      call denite#custom#var('grep', 'final_opts', [])
        endif
      endfunction
  " }}}3
'''

# defx.nvim {{{2
[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
  augroup defx-custom
    autocmd!
    autocmd FileType defx call s:defx_my_settings()
  augroup END

  function! s:defx_my_settings() abort
    setlocal signcolumn=no
    setlocal listchars=

    " Define mappings
    nnoremap <silent><buffer><expr> yy defx#do_action('copy')
    nnoremap <silent><buffer><expr> dd defx#do_action('move')
    nnoremap <silent><buffer><expr> p defx#do_action('paste')

    nnoremap <silent><buffer><expr> <CR> defx#do_action('multi',
      \ [['call', 'DefxPreCommand'], ['drop']])
    nnoremap <silent><buffer><expr> <C-M> defx#do_action('multi',
      \ [['call', 'DefxPreCommand'], ['drop']])
    nnoremap <silent><buffer><expr> l defx#do_action('open_or_close_tree')
    nnoremap <silent><buffer><expr> L defx#do_action('open')
    nnoremap <silent><buffer><expr> h defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> v defx#do_action('multi',
      \ [['call', 'DefxPreCommand'], ['drop', 'vsplit']])
    nnoremap <silent><buffer><expr> <C-s> defx#do_action('multi',
      \ [['call', 'DefxPreCommand'], ['drop', 'split']])
    nnoremap <silent><buffer><expr> t defx#do_action('multi',
      \ [['call', 'DefxPreCommand'], ['drop', 'tabedit']])
    nnoremap <silent><buffer><expr> P defx#do_action('open', 'pedit')
    nnoremap <silent><buffer><expr> o defx#do_action('open_or_close_tree')

    nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> N defx#do_action('new_file')
    nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')
    nnoremap <silent><buffer><expr> C
      \ defx#do_action('toggle_columns', 'mark:indent:git:icons:filename')

    " nnoremap <silent><buffer><expr> st defx#do_action('toggle_sort', 'time')
    " nnoremap <silent><buffer><expr> sf defx#do_action('toggle_sort', 'filename')
    " nnoremap <silent><buffer><expr> ss defx#do_action('toggle_sort', 'size')
    " nnoremap <silent><buffer><expr> se defx#do_action('toggle_sort', 'extension')

    nnoremap <silent><buffer><expr> D defx#do_action('remove')
    nnoremap <silent><buffer><expr> r defx#do_action('rename')
    nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
    nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
    nnoremap <silent><buffer><expr> Y defx#do_action('yank_path')
    nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
    nnoremap <silent><buffer><expr> ; defx#do_action('repeat')
    nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
    nnoremap <silent><buffer><expr> q defx#do_action('quit')
    nnoremap <silent><buffer><expr> <Space><Space> defx#do_action('toggle_select') . 'j'
    nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
    nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
    nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
    nnoremap <silent><buffer><expr> cd defx#do_action('change_vim_cwd')

    nnoremap <silent><buffer><expr> <SPACE>fg
      \ defx#do_action('call', 'DefxDeniteGrep')
    nnoremap <silent><buffer><expr> <SPACE>ff
      \ defx#do_action('call', 'DefxDeniteFile')
    nnoremap <silent><buffer><expr> ds
      \ defx#do_action('call', 'DefxSetDiffSource')
    nnoremap <silent><buffer><expr> dt
      \ defx#do_action('call', 'DefxSetDiffTarget')
    nnoremap <silent><buffer><expr> do
      \ defx#do_action('call', 'DefxOpenDiffDir')

    nmap <silent><buffer> <SPACE>gk <Plug>(defx-git-prev)
    nmap <silent><buffer> <SPACE>gj <Plug>(defx-git-next)

    " functions {{{
    function! DefxPreCommand(context) abort
      if a:context.buffer_name == 'defx-floating'
        quit
      elseif a:context.buffer_name == 'defx-tree'
        wincmd p
      endif
    endfunction

    function! DefxSetDiffSource(context) abort
      let g:defx_diff_source = a:context.targets[0]
      echo 'Set diff source:' g:defx_diff_source
    endfunction

    function! DefxSetDiffTarget(context) abort
      let g:defx_diff_target = a:context.targets[0]
      echo 'Set diff target:' g:defx_diff_target
    endfunction

    function! DefxOpenDiffDir(...) abort
      tabedit
      execute 'DirDiff' g:defx_diff_source g:defx_diff_target
    endfunction

    function! DefxDeniteGrep(context) abort
      call DefxPreCommand(a:context)
      let dirpath = fnamemodify(a:context.targets[0], ':p:h')
      exec 'Denite grep -no-empty -path=' . dirpath
    endfunction

    function! DefxDeniteFile(context) abort
      call DefxPreCommand(a:context)
      let dirpath = fnamemodify(a:context.targets[0], ':p:h')
      exec 'Denite file_rec -no-empty -mode=insert -path=' . dirpath
    endfunction
    " }}}

  endfunction

'''
hook_source = '''

  call defx#custom#option('_', {
    \ 'root_marker': ': ',
    \ 'buffer_name': 'defx',
    \ 'direction': 'topleft',
    \ 'split': 'vertical',
    \ 'columns': 'mark:indent:git:icons:filename:size:time',
    \ })
  call defx#custom#option('defx-floating', {
    \ 'split': 'floating',
    \ 'winrow': '1',
    \ 'winheight': &lines - 3,
    \ 'wincol': (&columns - 113) / 2,
    \ 'winwidth': '113',
    \ 'columns': 'mark:indent:git:icons:filename:size:time',
    \ })
  call defx#custom#option('defx-tree', {
    \ 'direction': 'topleft',
    \ 'split': 'vertical',
    \ 'winwidth': '35',
    \ 'columns': 'mark:indent:git:icons:filename',
    \ })

  call defx#custom#column('filename', {
    \ 'directory_icon': '',
    \ 'opened_icon': '',
    \ 'root_icon': '',
    \ 'min_width': '40',
    \ 'max_width': '80',
    \ })

'''

[[plugins]]
repo = 'kristijanhusak/defx-git'
on_source = 'defx.nvim'
hook_source = '''

  let g:defx_git#indicators = {
    \ 'Modified'  : '✹',
    \ 'Staged'    : '✚',
    \ 'Untracked' : '✭',
    \ 'Renamed'   : '➜',
    \ 'Unmerged'  : '═',
    \ 'Ignored'   : '☒',
    \ 'Deleted'   : '✖',
    \ 'Unknown'   : '?'
    \ }

  let g:defx_git#show_ignored = 0
'''

[[plugins]]
repo = 'kristijanhusak/defx-icons'
on_source = 'defx.nvim'
hook_source = '''
  let g:defx_icons_enable_syntax_highlight = 1
  let g:defx_icons_parent_icon = ''
  let g:defx_icons_root_opened_tree_icon = '-'
  let g:defx_icons_directory_icon = '+'
  let g:defx_icons_nested_opened_tree_icon = g:defx_icons_root_opened_tree_icon
  let g:defx_icons_nested_closed_tree_icon = g:defx_icons_directory_icon
  let g:defx_icons_directory_symlink_icon = ''
  let g:defx_icons_mark_icon = '-'
  let g:defx_icons_default_icon = ''
'''

# Shougo/deoplete.nvim {{{2
[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_if = '$DEOPLETE'
on_event = 'InsertEnter'
hook_source = '''

  let g:deoplete#enable_at_startup  = 1
  set completeopt+=noinsert
  set completeopt-=preview

  call deoplete#custom#source('buffer', 'min_pattern_length', 1)
  call deoplete#custom#source('tag', 'rank', 1)
  call deoplete#custom#source('_', 'matchers', ['matcher_fuzzy'])

  call deoplete#custom#var('omni', 'input_patterns', {
    \ 'stylus': ['\w+', '\w+[):; ]?\s+\w*', '[@!]'],
    \ 'vue':    ['\w+', '\w+[):;]?\s+\w*', '[@!]'],
    \ 'css':    ['\w+', '\w+[):;]?\s*\w*', '[@!]'],
  \ })

  call deoplete#custom#var('omni', 'functions', {
    \ 'stylus': ['stylcomplete#CompleteStyl'],
    \ 'css':    ['csscomplete#CompleteCSS'],
  \ })

'''

# ncm2/float-preview.nvim {{{2
[[plugins]]
repo = 'ncm2/float-preview.nvim'
on_source = 'deoplete.nvim'
on_if = '$DEOPLETE'
hook_source = '''

  let g:float_preview#docked = 0
  let g:float_preview#max_width = 200
  let g:float_preview#max_height = 200

'''

# ujihisa/neco-look {{{2
[[plugins]]
repo = 'ujihisa/neco-look'
on_source = 'deoplete.nvim'
hook_source = '''
  call deoplete#custom#source('look', 'rank', 1)
'''

# SirVer/ultisnips {{{2
[[plugins]]
repo = 'SirVer/ultisnips'
on_event = 'InsertEnter'
hook_add = '''
  let g:UltiSnipsExpandTrigger       = "<C-l>"
  let g:UltiSnipsJumpForwardTrigger  = "<C-i>"
  let g:UltiSnipsJumpBackwardTrigger = "<C-o>"
  let g:UltiSnipsSnippetsDir = g:dein_dir . "/repos/github.com/deresmos/vim-snippets/UltiSnips/"
'''

# elzr/vim-json {{{2
[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'
hook_source = '''
  let g:vim_json_syntax_conceal = 0
'''

# tpope/vim-endwise # {{{2
[[plugins]]
repo = 'tpope/vim-endwise'
on_event = 'InsertEnter'

# metakirby5/codi.vim # {{{2
[[plugins]]
repo = 'metakirby5/codi.vim'
on_ft = ['python', 'javascript', 'php']
hook_add = '''
  function! s:Codi(...) abort " {{{
    let edit = 'tabedit'
    if a:0 > 1
      let edit = a:2
    endif

    execute edit '$HOME/.scratch.' . a:1
    execute 'Codi'
  endfunction " }}}

  command! -nargs=? CodiPython     call s:Codi('py',  <f-args>)
  command! -nargs=? CodiJavaScript call s:Codi('js',  <f-args>)
  command! -nargs=? CodiPHP        call s:Codi('php', <f-args>)

  nnoremap <silent> <Space>mcip :CodiPython<CR>
  nnoremap <silent> <Space>mcij :CodiJavaScript<CR>
  nnoremap <silent> <Space>mcih :CodiPHP<CR>
'''
hook_source = '''
  augroup my_codi
    autocmd!
    autocmd FileType python,javascript,php nnoremap <buffer><silent> <Space>mcii :Codi<CR>
  augroup END
'''

# autozimu/LanguageClient-neovim # {{{2
[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
build = 'bash install.sh'
on_if = '$DEOPLETE'
hook_source = '''

  function! s:lsp()
    nnoremap <buffer><silent> <Space>mgg :call LanguageClient_textDocument_definition()<CR>
    nnoremap <buffer><silent> <Space>mr  :call LanguageClient_textDocument_rename()<CR>
    nnoremap <buffer><silent> <Space>md  :call LanguageClient_textDocument_hover()<CR>
    nnoremap <buffer><silent> <Space>mu  :call LanguageClient_textDocument_references()<CR>
  endfunction

  augroup my-lsp-cmd
    autocmd!
    autocmd FileType vue,javascript,python,php,css,sh :call s:lsp()
  augroup END
'''
hook_source = '''
  let g:LanguageClient_diagnosticsEnable = 0
  let g:LanguageClient_serverCommands = {
    \ 'vue': ['vls'],
    \ 'javascript': ['javascript-typescript-stdio'],
    \ 'javascript.jsx': ['javascript-typescript-stdio'],
    \ 'python': ['pyls'],
    \ 'php': ['intelephense', '--stdio'],
    \ 'css': ['css-languageserver', '--stdio'],
    \ 'sh': ['bash-language-server', 'start'],
  \ }
'''
# }}}1

# Markdown plugins {{{1
# godlygeek/tabular # {{{2
[[plugins]]
repo = 'godlygeek/tabular'
on_ft = ['markdown','mkd']

# iamcco/markdown-preview.vim # {{{2
[[plugins]]
repo = 'iamcco/markdown-preview.vim'
on_ft = ['markdown','mkd']
hook_source = '''
  let g:mkdp_path_to_chrome = "firefox"
'''

# plasticboy/vim-markdown # {{{2
[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown','mkd']
hook_source = '''
  let g:vim_markdown_conceal = 0
  let g:vim_markdown_new_list_item_indent = 2
'''

# }}}1

# HTML / CSS plugins {{{1
# mattn/emmet-vim {{{2
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['css', 'html', 'xhtml', 'php']
hook_source = '''
  let g:user_emmet_mode       = 'nv'
  let g:user_emmet_leader_key = '<c-y>'
'''

# gregsexton/MatchTag {{{2
[[plugins]]
repo = 'gregsexton/MatchTag'
on_ft = ['html', 'xhtml']

# hail2u/vim-css3-syntax # {{{2
[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = 'css'

# vim-scripts/CSSMinister # {{{2
[[plugins]]
repo = 'vim-scripts/CSSMinister'
on_ft = 'css'
hook_add = '''
  nnoremap <SPACE>cth :<C-u>ToHex<CR>
  nnoremap <SPACE>ctr :<C-u>ToRGB<CR>
'''

# othree/html5.vim # {{{2
[[plugins]]
repo = 'othree/html5.vim'
on_ft = 'html'
# }}}1

# Go plugins {{{1
# fatih/vim-go # {{{2
[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_source = '''
  augroup vim-go-setting
    autocmd!
    autocmd FileType go setlocal completeopt-=preview
  augroup END

  let g:go_metalinter_autosave = 0
'''

# zchee/deoplete-go # {{{2
[[plugins]]
repo = 'zchee/deoplete-go'
on_event = 'InsertEnter'
on_ft = 'go'

# }}}1

# joonty/vdebug.git # {{{2
[[plugins]]
repo = 'joonty/vdebug.git'
if = '''has('python')'''
on_ft = ['php', 'python']
hook_source = '''
    let g:vdebug_options = {
      \ "port":          9001,
      \ "timeout":       60,
      \ "break_on_open": 1,
      \ "ide_key":       ''
    \ }

    let g:vdebug_keymap = {
      \ "run":               "<Space>dr",
      \ "run_to_cursor":     "<Space>dt",
      \ "step_over":         "<Space>dj",
      \ "step_into":         "<Space>di",
      \ "step_out":          "<Space>do",
      \ "close":             "<Space>dc",
      \ "detach":            "<Space>dd",
      \ "set_breakpoint":    "<Space>dp",
      \ "get_context":       "<Space>dg",
      \ "eval_under_cursor": "<Space>de",
      \ "eval_visual":       "<Space>dv",
    \ }
'''

# }}}1

# iloginow/vim-stylus # {{{1
[[plugins]]
repo = 'deresmos/vim-stylus'
on_ft = ['stylus', 'vue']
hook_source = '''
  let g:quickrun_config['stylus'] = {
    \ 'command': 'stylus', 'exec': ['%c < %s']
  \ }
'''

# osyo-manga/vim-precious # {{{1
[[plugins]]
repo = 'osyo-manga/vim-precious'
on_ft = ['vue', 'toml']
hook_source = '''
  let g:precious_enable_switch_CursorMoved_i = {'*': 0}
  let g:precious_enable_switch_CursorHold    = {'*': 0}
  let g:precious_enable_switchers = {
    \ '*':    {'setfiletype': 0},
    \ 'toml': {'setfiletype': 1},
    \ 'html': {'setfiletype': 1},
    \ 'vue':  {'setfiletype': 1},
  \ }
'''
hook_post_source = '''
  augroup precious-augroup
    autocmd!
  augroup END
'''
hook_add = '''
  function! s:precious()
    augroup my-precious
      autocmd!
      autocmd CursorMoved <buffer> :PreciousSwitch
    augroup END

    omap <buffer> ic <Plug>(textobj-precious-i)
    vmap <buffer> ic <Plug>(textobj-precious-i)
    nmap <buffer><silent> <Space>mcC <Plug>(precious-quickrun-op)ic
  endfunction

  augroup my-precious-cmd
    autocmd!
    autocmd FileType vue,toml call s:precious()
    autocmd BufEnter,BufWinEnter *.vue,*.toml call s:precious()
  augroup END
'''

# hjson/vim-hjson # {{{1
[[plugins]]
repo = 'hjson/vim-hjson'
on_ft = ['hjson']

# Shougo/echodoc.vim # {{{1
[[plugins]]
repo = 'Shougo/echodoc.vim'
on_source = 'deoplete.nvim'
hook_add = '''

  let g:echodoc#enable_at_startup = 1
  let g:echodoc#type = 'virtual'

'''

# Shougo/neco-vim # {{{1
[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'

[[plugins]]
repo = 'neoclide/coc-neco'
on_ft = 'vim'

# rhysd/git-messenger.vim # {{{1
[[plugins]]
repo = 'rhysd/git-messenger.vim'
on_cmd = 'GitMessenger'
on_map = '<Plug>(git-messenger'
hook_add = '''

  nmap <SPACE>gid <Plug>(git-messenger)
  nmap <SPACE>giD <Plug>(git-messenger-into-popup)

'''
hook_post_source = '''

  highlight link gitmessengerPopupNormal NormalFloat

'''

# Shougo/deol {{{1
[[plugins]]
repo = 'Shougo/deol.nvim'
on_cmd = 'Deol'
hook_add = '''
  nnoremap <silent> <SPACE>ttt :<C-u>call <SID>DeolFloating()<CR>

  function! s:DeolFloating() abort
    exec 'Deol -split=floating'
      \ '-winrow=1 -winheight=' . string(&lines * 0.8)
      \ '-wincol=1 -winwidth=' . string(&columns)
  endfunction
'''

# t9md/vim-choosewin {{{1
[[plugins]]
repo = 't9md/vim-choosewin'
on_map = '<Plug>(choosewin'
hook_add = '''

  nmap <SPACE>wc <Plug>(choosewin)
  let g:choosewin_overlay_enable = 1
  let g:choosewin_overlay_clear_multibyte = 1

'''

# neoclide/coc.nvim {{{1
[[plugins]]
repo = 'neoclide/coc.nvim'
on_if = 'empty($DEOPLETE)'
build = 'coc#util#install()'
hook_source = '''

  nmap <silent> <SPACE>mgg <Plug>(coc-definition)
  " nmap <silent> gy <Plug>(coc-type-definition)
  " nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> <SPACE>mu <Plug>(coc-references)
  nmap <silent> <SPACE>mf <Plug>(coc-format)
  xmap <silent> <SPACE>mf <Plug>(coc-format-selected)
  nmap <silent> <SPACE>mF <Plug>(coc-fix-current)
  nmap <silent> <SPACE>mr <Plug>(coc-rename)
  nmap <silent> <SPACE>ej <Plug>(coc-diagnostic-next)
  nmap <silent> <SPACE>ek <Plug>(coc-diagnostic-prev)

  autocmd CursorHold * silent call CocActionAsync('highlight')
  nnoremap <silent> <SPACE>md :call <SID>show_documentation()<CR>
  nnoremap <silent> <SPACE>ms :call CocActionAsync('showSignatureHelp')<CR>

  function! s:show_documentation()
    if &filetype == 'vim'
      execute 'h '.expand('<cword>')
    else
      call CocActionAsync('doHover')
    endif
  endfunction

  function! CocCustomInstall() abort
    CocInstall coc-python
      \ coc-snippets
      \ coc-json
      \ coc-css
      \ coc-html
      \ coc-tsserver
      \ coc-phpls
      \ coc-tag
      \ coc-tslint
      \ coc-yaml
      \ coc-emmet
      \ coc-vetur
      \ coc-yank
  endfunction

'''

[[plugins]]
repo = 'neoclide/coc-denite'
on_source = 'coc.nvim'

# liuchengxu/vista.vim {{{1
[[plugins]]
repo = 'liuchengxu/vista.vim'
hook_source = '''

  let g:vista_echo_cursor_strategy = "floating_win"

'''

# majutsushi/tagbar {{{1
[[plugins]]
repo = 'deresmos/tagbar'
hook_source = '''
  let g:tagbar_previewwin_pos    = "rightbelow"
  let g:tagbar_iconchars         = ['+', '-']
  let g:tagbar_map_openallfolds  = '-'
  let g:tagbar_map_closeallfolds = '='
  let g:tagbar_sort              = 0

  let g:tagbar_map_showproto = '<Nop>'
  let g:tagbar_map_nexttag   = '<C-j>'
  let g:tagbar_map_prevtag   = '<C-k>'
  let g:tagbar_map_openfold  = '<Space>vo'
  let g:tagbar_map_closefold = '<Space>vc'

  let g:tagbar_type_dosini = {
  \  'ctagstype': 'ini',
  \  'kinds': [
  \    's:Sections:1:1',
  \  ]
  \}

  let g:tagbar_type_css = {
  \  'ctagstype' : 'mycss',
  \  'kinds' : [
  \    's:Selectors:1:1',
  \    '@:@:0:1',
  \    'c:Classes:1:0',
  \    'i:Identities:1:0',
  \    'e:Elements:1:0',
  \  ]
  \}

  let g:tagbar_type_javascript = {
  \  'ctagstype' : 'myjs',
  \  'kinds' : [
  \    'f:Functions:0:1',
  \    'v:Variables:1:0',
  \    'a:Arrays:1:0',
  \    'n:Numbers:1:0',
  \    's:Strings:1:0',
  \    'b:Bools:1:0',
  \    'j:jQuery:1:0',
  \    'z:Functions:1:1'
  \  ]
  \}

  let g:tagbar_type_php = {
  \  'ctagstype' : 'myphp',
  \  'kinds' : [
  \    'd:Const Definitions:0:0',
  \    'c:Classes:0:1',
  \    'm:Methods:0:1',
  \    'F:Functions:0:1',
  \    'p:Properties:1:0',
  \    'v:Variables:1:0'
  \  ]
  \}

  let g:tagbar_type_html = {
  \  'ctagstype' : 'myhtml',
  \  'kinds' : [
  \    'i:Identities:0:0',
  \    'c:Classes:0:1',
  \  ]
  \}

  let g:tagbar_type_xhtml = {
  \  'ctagstype' : 'myhtml',
  \  'kinds' : [
  \    'i:Identities:1:0',
  \    'c:Classes:1:0',
  \    'e:Ebisu tags:1:0',
  \  ]
  \}

  let s:tagbar_type_vbs = {
  \  'ctagstype' : 'myvbs',
  \  'kinds' : [
  \    'd:Constants:0:0',
  \    'f:Functions:1:1',
  \    's:Subroutines:1:1',
  \    'v:Variables:1:0',
  \  ]
  \}

  let g:tagbar_type_wsh    = s:tagbar_type_vbs
  let g:tagbar_type_aspvbs = s:tagbar_type_vbs
  let g:tagbar_type_vb     = s:tagbar_type_vbs
'''

# ranger cli {{{1
[[plugins]]
repo = 'francoiscabrol/ranger.vim'

[[plugins]]
repo = 'rbgrouleff/bclose.vim'

# etc {{{1
# idanarye/vim-merginal {{{2
[[plugins]]
repo = 'idanarye/vim-merginal'

# deresmos/agit.vim {{{2
[[plugins]]
repo = 'deresmos/agit.vim'
hook_source = '''
  augroup agit-keymap
    autocmd!
    autocmd FileType agit nmap <buffer> rv <Plug>(agit-git-revert)
    autocmd FileType agit nmap <buffer> cp <Plug>(agit-git-cherry-pick)
    autocmd FileType agit nnoremap <buffer><silent> ch
      \ :let g:gitgutter_diff_base = agit#extract_hash(getline('.'))<CR>
      \ :echo 'Switched gitgutter hash'<CR>
  augroup END

  let g:agit_max_log_lines = 200
  let g:agit_ignore_spaces = 0

  let g:agit_preset_views = {
    \ 'default': [
    \   {'name': 'log'},
    \   {'name': 'stat',
    \    'layout': 'botright vnew'},
    \   {'name': 'diff',
    \    'layout': 'belowright {winheight(".") * 3 / 4}new'}
    \ ],
    \ 'file': [
    \   {'name': 'filelog'},
    \   {'name': 'stat',
    \    'layout': 'botright vnew'},
    \   {'name': 'filediff',
    \    'layout': 'belowright {winheight(".") * 3 / 4}new'}
    \ ]}

  let g:agit_diff_stat_cp932_pattern = [
    \ 'B_dev/',
    \ 'toB/'
    \ ]
'''

# jreybert/vimagit {{{2
[[plugins]]
repo = 'jreybert/vimagit'
on_cmd = 'Magit'
hook_source = '''
  let g:magit_default_show_all_files = 2
  let g:magit_default_fold_level     = 0
  let g:magit_default_sections       = [
    \ 'info', 'commit',
    \ 'staged', 'unstaged', 'stash']

  augroup magit-keymap
    autocmd!
    autocmd FileType magit nmap <buffer> <SPACE>gj <C-n>
    autocmd FileType magit nmap <buffer> <SPACE>gk <C-p>
  augroup END
'''

# mattn/gist-vim {{{2
[[plugins]]
repo = 'mattn/gist-vim'
hook_source = '''
  let g:gist_update_on_write = 2
  let g:gist_post_private    = 1
'''

# tyru/open-browser.vim {{{2
[[plugins]]
repo = 'tyru/open-browser.vim'
on_map = '<Plug>(openbrowser-smart-'
hook_add = '''
  nmap <SPACE>os <Plug>(openbrowser-smart-search)
  xmap <SPACE>os <Plug>(openbrowser-smart-search)
  nnoremap <silent> <SPACE>ob :<C-u>execute "OpenBrowser" expand("%:p")<CR>
'''
hook_source = '''
  if system('uname') == "Linux\n"
    let g:openbrowser_browser_commands = [
      \ {"name": "firefox",
      \  "args": ["{browser}", "{uri}"]},
    \ ]
  endif
'''

# thinca/vim-qfreplace {{{2
[[plugins]]
repo = 'thinca/vim-qfreplace'

# scrooloose/nerdtree {{{2
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_source = '''
  let g:NERDTreeMinimalUI = 1
  let g:NERDTreeAutoDeleteBuffer = 1
  let g:NERDTreeMapActivateNode = 'l'
  let g:NERDTreeMapChangeRoot = 'L'
  let g:NERDTreeMapUpdir = 'h'
  let g:NERDTreeMapUpdirKeepOpen = 'H'
  let g:NERDTreeMapOpenSplit = 's'
  let g:NERDTreeMapOpenVSplit = 'v'
  let g:NERDTreeMapOpenExpl = '<Nop>'
  augroup nerdtree-keymap
    autocmd!
    autocmd FileType nerdtree nmap <buffer> dd md
    autocmd FileType nerdtree nmap <buffer> DD mdy
    autocmd FileType nerdtree nmap <buffer> o ma
    autocmd FileType nerdtree nmap <buffer> i ml
    autocmd FileType nerdtree nmap <buffer> cp mc
    autocmd FileType nerdtree nmap <buffer> rn mm
    autocmd FileType nerdtree nmap <buffer> vd mv
  augroup END
'''

# deresmos/nerdtree-diff-plugin {{{2
[[plugins]]
repo = 'deresmos/nerdtree-diff-plugin'
on_source = 'nerdtree'

# deresmos/nerdtree-yp-plugin {{{2
[[plugins]]
repo = 'deresmos/nerdtree-yp-plugin'
on_source = 'nerdtree'
hook_source = '''
  augroup nerdtree-yp-keymap
    autocmd!
    autocmd FileType nerdtree nmap <buffer> yy my
    autocmd FileType nerdtree nmap <buffer> pp mp
  augroup END
'''

# deresmos/nerdtree-dirdiff-plugin {{{2
[[plugins]]
repo = 'deresmos/nerdtree-dirdiff-plugin'
on_source = 'nerdtree'
hook_source = '''
  augroup nerdtree-dirdiff-keymap
    autocmd!
    autocmd FileType nerdtree nmap <buffer> dt mt
    autocmd FileType nerdtree nmap <buffer> dw mw
  augroup END
'''

# haya14busa/vim-migemo # {{{2
# yaourt cmigemo
[[plugins]]
repo = 'haya14busa/vim-migemo'

# schickling/vim-bufonly # {{{2
[[plugins]]
repo = 'schickling/vim-bufonly'

# qpkorr/vim-renamer {{{2
[[plugins]]
repo = 'qpkorr/vim-renamer'

# mbbill/undotree {{{2
[[plugins]]
repo = 'mbbill/undotree'

# cocopon/colorswatch.vim {{{2
[[plugins]]
repo = 'cocopon/colorswatch.vim'
hook_add = '''
  nmap <silent> <SPACE>ocw :ColorSwatchGenerate<CR>
'''

# AndrewRadev/switch.vim {{{2
[[plugins]]
repo = 'AndrewRadev/switch.vim'

# hecal3/vim-leader-guide {{{2
[[plugins]]
repo = 'hecal3/vim-leader-guide'
hook_add = '''
  nnoremap <silent> <Space>? :<C-u>LeaderGuide '<Space>'<CR>
'''
hook_source = '''
  let g:lmap =  {} " {{{
  let g:lmap = {
  \   'f': {
  \     'name': 'file',
  \   },
  \   'q': {
  \     'name': 'quit and Qfreplace',
  \   },
  \   'd': {
  \     'name': 'denite',
  \   },
  \   'b': {
  \     'name': 'buffer',
  \   },
  \   'p': {
  \     'name': 'project and paste',
  \   },
  \   'y': {
  \     'name': 'yank',
  \   },
  \   't': {
  \     'name': 'tab, tags, terminal and toggle',
  \   },
  \   'w': {
  \     'name': 'window',
  \   },
  \   'g': {
  \     'name': 'git',
  \   },
  \   'v': {
  \     'name': 'fold',
  \   },
  \   's': {
  \     'name': 'session and SeachBuffers',
  \   },
  \   'h': {
  \     'name': 'howm',
  \   },
  \   'r': {
  \     'name': 'reset, replace, rename and record',
  \   },
  \   'j': {
  \     'name': 'etc',
  \   },
  \   'c': {
  \     'name': 'commenter',
  \   },
  \   'o': {
  \     'name': 'browser and markdown',
  \   },
  \   'm': {
  \     'name': 'mark and program',
  \   },
  \   'u': {
  \     'name': 'update and undo',
  \   },
  \   'a': {
  \     'name': 'align',
  \   },
  \   'e': {
  \     'name': 'linter',
  \   },
  \ }
  " }}}

  call leaderGuide#register_prefix_descriptions("<Space>", "g:lmap")
'''

# Chiel92/vim-autoformat {{{2
[[plugins]]
repo = 'Chiel92/vim-autoformat'
hook_source = '''
  let g:formatter_yapf_style = 'pep8'
  let g:formatdef_csscomb    = '"csscomb"'
  let g:formatters_css       = ['csscomb', 'cssbeautify']
'''

# AndrewRadev/linediff.vim {{{2
[[plugins]]
repo = 'AndrewRadev/linediff.vim'

# chrisbra/SudoEdit.vim {{{2
[[plugins]]
repo = 'chrisbra/SudoEdit.vim'

# KabbAmine/vCoolor.vim {{{2
[[plugins]]
repo = 'KabbAmine/vCoolor.vim'
hook_add = '''
  nnoremap <SPACE>ocp :VCoolor<CR>
  nnoremap <SPACE>ocP :VCoolIns r<CR>
'''
hook_source = '''
  let g:vcoolor_disable_mappings = 1
  let g:vcoolor_lowercase = 0
'''

# will133/vim-dirdiff {{{2
[[plugins]]
repo = 'will133/vim-dirdiff'

# MattesGroeger/vim-bookmarks {{{2
[[plugins]]
repo = 'MattesGroeger/vim-bookmarks'
hook_add = '''
  nnoremap [Bookmark] <Nop>
  nmap <Space>bm [Bookmark]

  nmap <silent> [Bookmark]t <Plug>BookmarkToggle
  nmap <silent> [Bookmark]a <Plug>BookmarkAnnotate
  nmap <silent> [Bookmark]l <Plug>BookmarkShowAll
  nmap <silent> [Bookmark]j <Plug>BookmarkNext
  nmap <silent> [Bookmark]k <Plug>BookmarkPrev
  nmap <silent> [Bookmark]C <Plug>BookmarkClear
  nmap <silent> [Bookmark]X <Plug>BookmarkClearAll
  nmap <silent> [Bookmark]jj <Plug>BookmarkMoveDown
  nmap <silent> [Bookmark]kk <Plug>BookmarkMoveUp
  nmap <silent> [Bookmark]g <Plug>BookmarkMoveToLine
  nmap [Bookmark]S :BookmarkSave<space>
  nmap [Bookmark]L :BookmarkLoad<space>
'''
hook_source = '''
  let g:bookmark_no_default_key_mappings = 1
  let g:bookmark_auto_save_file          = g:vim_dir . '/.bookmarks'
  let g:bookmark_location_list           = 1
  let g:bookmark_sign                    = '//'
  let g:bookmark_annotation_sign         = '//'

  highlight default link BookmarkAnnotationSign BookmarkSign
'''

# nathanaelkane/vim-indent-guides {{{2
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  nnoremap <silent> <Space>tsL :<C-u>IndentGuidesToggle<CR>
'''
hook_source = '''
  let g:indent_guides_guide_size            = 1
  let g:indent_guides_start_level           = 2
  let g:indent_guides_enable_on_vim_startup = 0

  let g:indent_guides_exclude_filetypes = [
    \ 'help',
    \ 'nerdtree',
    \ 'tagbar',
    \ 'nvim-term',
    \ 'nvim-term-t',
  \ ]
'''

# rhysd/conflict-marker.vim {{{2
[[plugins]]
repo = 'rhysd/conflict-marker.vim'
on_map = '<Plug>(conflict-marker-'
hook_add = '''
  nmap <silent> <Space>gcj <Plug>(conflict-marker-next-hunk)
  nmap <silent> <Space>gck <Plug>(conflict-marker-prev-hunk)
  nmap <silent> <Space>gct <Plug>(conflict-marker-themselves)
  nmap <silent> <Space>gco <Plug>(conflict-marker-ourselves)
  nmap <silent> <Space>gcn <Plug>(conflict-marker-none)
  nmap <silent> <Space>gcb <Plug>(conflict-marker-both)
'''
hook_source = '''
  let g:conflict_marker_enable_mappings = 0
'''

# skywind3000/asyncrun.vim {{{2
[[plugins]]
repo = 'skywind3000/asyncrun.vim'
hook_add = '''
  function! s:asyncrun_after()
    let defualt_cmd = 'copen | wincmd p'
    let cmd = get(b:, 'asyncrun_after_cmd', v:null)
    if cmd == v:null
      let cmd = defualt_cmd
    endif

    execute cmd

    " Reset asyncrun_after_cmd
    if exists('b:asyncrun_after_cmd')
      unlet b:asyncrun_after_cmd
    endif
  endfunction

  augroup custom-asyncrun
    autocmd!
    autocmd User AsyncRunStart highlight! LightlineMiddle_active ctermbg=34
    autocmd User AsyncRunStop highlight! link LightlineMiddle_active LightlineMiddle_normal | call s:asyncrun_after()
  augroup END
'''

# chrisbra/colorizer {{{2
[[plugins]]
repo = 'chrisbra/colorizer'
on_cmd = ['ColorToggle']
hook_add = '''
  nnoremap <silent> <Space>tct :<C-u>ColorToggle<CR>
'''
hook_source = '''
  let g:colorizer_auto_color = 0
  let g:colorizer_auto_map = 0
'''


# maxwell-k/dbext.vim {{{2
# [[plugins]]
# repo = 'maxwell-k/dbext.vim'
# hook_source = '''
#   if filereadable(expand('~/.dbextrc'))
#     execute 'source' expand('~/.dbextrc')
#   endif
#
#   let g:dbext_default_buffer_lines = 25
#
#   nmap <Space>mdp <Plug>DBPromptForBufferParameters
#   nmap <Space>mdsp :<C-u>DBSetOption profile=
#   nmap <Space>mdsP :<C-u>DBSetOption passwd=
#
#   nmap <Space>mdlt <Plug>DBListTable<CR>
#   nmap <Space>mdlv <Plug>DBListView
#   nmap <Space>mdlp <Plug>DBListProcedure
#
#   nmap <Space>mdi <Plug>DBSelectFromTable
#   nmap <Space>mdd <Plug>DBDescribeTable
#   nmap <Space>mdh <Plug>DBHistory
#   nmap <Space>mdI <Plug>DBSelectFromTableWithWhere
#
#   nmap <Space>mdr <Plug>DBExecSQLUnderCursor
#   xmap <Space>mdr <Plug>DBExecVisualSQL
# '''

# kana/vim-smartinput {{{2
[[plugins]]
repo = 'kana/vim-smartinput'
on_event = 'InsertEnter'
hook_source = '''
  call smartinput#define_rule({
  \   'at'       : '^\s*\%(\<def\>\|\<if\>\|\<for\>\|\<while\>\|\<class\>\|\<with\>\)\s*\w\+.*\%#',
  \   'char'     : '(',
  \   'input'    : '():<Left><Left>',
  \   'filetype' : ['python'],
  \   })
  call smartinput#define_rule({
  \   'at'       : '^\s*\%(\<def\>\|\<if\>\|\<for\>\|\<while\>\|\<class\>\|\<with\>\)\s*\w\+.*\%#.*:',
  \   'char'     : '(',
  \   'input'    : '()<Left>',
  \   'filetype' : ['python'],
  \   })
'''

# junegunn/vim-easy-align {{{2
[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
  xmap ga <Plug>(EasyAlign)
'''

# thinca/vim-zenspace {{{2
[[plugins]]
repo = 'thinca/vim-zenspace'

# t9md/vim-quickhl {{{2
[[plugins]]
repo = 't9md/vim-quickhl'
on_map = '<Plug>(quickhl-'
hook_add = '''
  nnoremap <Space>mp :QuickhlManualAdd<space>
  nmap <Space>mt <Plug>(quickhl-manual-this)
  xmap <Space>mt <Plug>(quickhl-manual-this)
  nmap <Space>mT <Plug>(quickhl-manual-reset)
  xmap <Space>mT <Plug>(quickhl-manual-reset)
  nmap <Space>mC <Plug>(quickhl-cword-toggle)
'''

# fuenor/qfixhowm {{{2
[[plugins]]
repo = 'fuenor/qfixhowm'
on_func = ['qfixmemo#Calendar', 'qfixmemo#EditDiary', 'qfixmemo#FGrep',
           'qfixmemo#PairFile']
hook_add = '''
  let g:QFixHowm_Key            = '<Nop>'
  let g:howm_fileencoding       = 'utf-8'
  let g:howm_fileformat         = 'unix'
  let g:qfixmemo_diary          = '%Y/%m/%Y-%m-%d'
  let g:QFixHowm_CalendarWinCmd = 'rightbelow'
  let g:QFixHowm_CalendarCount  = 3
  let g:QFixHowm_FileType       = 'qfix_memo'
  let g:qfixmemo_template       = ['%TITLE% ']
  let g:qfixmemo_use_addtime    = 0
  let g:qfixmemo_use_updatetime = 0
  let g:QFixHowm_SaveTime       = -1

  let g:QFixHowm_RootDir         = '~/.howm'
  let g:howm_dir                 = g:QFixHowm_RootDir . '/main'
  let g:qfixmemo_folding_pattern = '^=[^=]'

  function! QFixMemoBufRead()
    setlocal foldenable
  endfunction

  command! -nargs=1 HowmDir let g:howm_dir = g:QFixHowm_RootDir.'/'.<q-args>|echo 'Switched' <q-args>
  nnoremap <silent> <SPACE>hpw :<C-u>HowmDir work<CR>
  nnoremap <silent> <SPACE>hpm :<C-u>HowmDir main<CR>
  nnoremap <silent> <SPACE>hpl :<C-u>call <SID>pullHowm()<CR>
  nnoremap <silent> <SPACE>hps :<C-u>call <SID>pushHowm()<CR>

  function! s:pullHowm() abort " {{{
    execute 'AsyncRun -cwd=' . g:QFixHowm_RootDir 'git pull origin master'
  endfunction
  " }}}
  function! s:pushHowm() abort " {{{
    execute 'AsyncRun -cwd=' . g:QFixHowm_RootDir ' git add . && git commit -m "commit" && git push origin master'
  endfunction
  " }}}

'''

# easymotion/vim-easymotion {{{2
[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = '<Plug>(easymotion-'
hook_add = '''
  map f <Plug>(easymotion-bd-fl)
  map t <Plug>(easymotion-bd-tl)
  nmap <SPACE>jj <Plug>(easymotion-overwin-f2)
  omap <SPACE>jj <Plug>(easymotion-overwin-f2)
  nmap <SPACE>jg <Plug>(easymotion-sn)
  omap <SPACE>jg <Plug>(easymotion-tn)
'''
hook_source = '''
  let g:EasyMotion_do_mapping = 0
  let g:EasyMotion_enter_jump_first = 1
  let g:EasyMotion_space_jump_first = 1
'''

# LeafCage/yankround.vim {{{2
[[plugins]]
repo = 'LeafCage/yankround.vim'
on_map = '<Plug>(yankround-'
hook_add = '''
  nmap p <Plug>(yankround-p)
  nmap P <Plug>(yankround-P)
  nmap <C-p> <Plug>(yankround-prev)
  nmap <C-n> <Plug>(yankround-next)
'''
hook_source = '''
  let g:yankround_max_history = 20
  let g:yankround_use_region_hl = 1
'''

# haya14busa/incsearch.vim {{{2
[[plugins]]
repo = 'haya14busa/incsearch.vim'
on_map = '<Plug>(incsearch-'
hook_add = '''
  map /  <Plug>(incsearch-forward)
  map g/ <Plug>(incsearch-stay)
'''

[[plugins]]
repo = 'haya14busa/incsearch-fuzzy.vim'
on_map = '<Plug>(incsearch-fuzzy'
hook_add = '''
  nmap <Space>z;   <Plug>(incsearch-fuzzy-/)
  nmap <Space>zg;  <Plug>(incsearch-fuzzy-stay)
  nmap <Space>zs;  <Plug>(incsearch-fuzzyspell-/)
  nmap <Space>zsg; <Plug>(incsearch-fuzzyspell-stay)
'''

[[plugins]]
repo = 'haya14busa/incsearch-migemo.vim'
on_map = '<Plug>(incsearch-migemo'
hook_add = '''
  nmap <Space>m;  <Plug>(incsearch-migemo-/)
  nmap <Space>mg; <Plug>(incsearch-migemo-stay)
'''

# tpope/tpope-vim-abolish {{{2
[[plugins]]
repo = 'tpope/tpope-vim-abolish'
on_cmd = ['Subvert', 'S']
hook_add = '''
  nnoremap <SPACE>/ :S/
'''

# omnisharp {{{2
[[plugins]]
repo = 'OmniSharp/omnisharp-vim'
on_ft = ['cs']

[[plugins]]
repo = 'tpope/vim-dispatch'
on_source = 'omnisharp-vim'

[[plugins]]
repo = 'Robzz/deoplete-omnisharp'
on_ft = ['cs']
hook_add = '''
  let g:OmniSharp_server_use_mono = 1
  let g:OmniSharp_server_type = 'roslyn'
'''
