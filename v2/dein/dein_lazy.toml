[[plugins]]
repo = 'hrsh7th/cmp-buffer'
on_source = ['nvim-cmp']

[[plugins]]
repo = 'hrsh7th/cmp-calc'
on_source = ['nvim-cmp']

[[plugins]]
repo = 'hrsh7th/cmp-nvim-lua'
on_source = ['nvim-cmp']

[[plugins]]
repo = 'hrsh7th/cmp-path'
on_source = ['nvim-cmp']

[[plugins]]
repo = 'onsails/lspkind-nvim'
on_lua = ['lspkind']
on_source = ['nvim-cmp']
hook_source = '''
lua << EOF
  require('lspkind').init({
      preset = 'default',
      symbol_map = {},
  })
EOF
'''

[[plugins]]
repo = 'hrsh7th/nvim-cmp'
on_lua = ['cmp']
on_event = ['InsertEnter']
hook_source = '''
set completeopt=menu,menuone,noselect

lua << EOF
  local cmp = require'cmp'
  cmp.setup({
    snippet = {
      expand = function(args)
        vim.fn["UltiSnips#Anon"](args.body)
      end,
    },
    mapping = {
      ['<C-j>'] = cmp.mapping.select_next_item({ behavior = cmp.SelectBehavior.Insert }),
      ['<C-k>'] = cmp.mapping.select_prev_item({ behavior = cmp.SelectBehavior.Insert }),
      ['<C-d>'] = cmp.mapping.scroll_docs(-4),
      ['<C-f>'] = cmp.mapping.scroll_docs(4),
      ['<C-Space>'] = cmp.mapping.complete(),
      ['<C-e>'] = cmp.mapping.close(),
      ['<CR>'] = cmp.mapping.confirm({ select = true }),
    },
    sources = {
      { name = 'path' },
      { name = 'nvim_lsp' },
      { name = 'buffer' },
      { name = 'calc' },
      { name = 'nvim_lua' },
      { name = 'nvim_lsp_signature_help' },
    }
  })
EOF
'''

[[plugins]]
repo = 'rhysd/conflict-marker.vim'
on_map = ['<Plug>(conflict-marker-']
hook_add = '''
  nmap <silent> <Space>gcj <Plug>(conflict-marker-next-hunk)
  nmap <silent> <Space>gck <Plug>(conflict-marker-prev-hunk)
  nmap <silent> <Space>gct <Plug>(conflict-marker-themselves)
  nmap <silent> <Space>gco <Plug>(conflict-marker-ourselves)
  nmap <silent> <Space>gcn <Plug>(conflict-marker-none)
  nmap <silent> <Space>gcb <Plug>(conflict-marker-both)
'''
hook_source = '''
  let g:conflict_marker_enable_mappings = 0
'''

[[plugins]]
repo = 'folke/trouble.nvim'
on_cmd = ['Trouble']
hook_add = '''
nnoremap [Trouble] <Nop>
nmap <silent><Space>l [Trouble]

nnoremap [Trouble]w <cmd>TroubleToggle workspace_diagnostics<CR>
nnoremap [Trouble]d <cmd>TroubleToggle document_diagnostics<CR>
nnoremap [Trouble]q <cmd>TroubleToggle quickfix<CR>
nnoremap [Trouble]l <cmd>TroubleToggle loclist<CR>
nnoremap [Trouble]r <cmd>TroubleToggle lsp_references<CR>

lua << EOF
  local defaultCallHierachyIncoming = vim.lsp.handlers['callHierarchy/incomingCalls']
  local defaultCallHierachyOutgoing = vim.lsp.handlers['callHierarchy/outgoingCalls']
  local customCallHierachy = function(direction)
    return function(err, result)
      if err ~= nil or result == nil then
        vim.notify("no incomming calls", vim.log.levels.WARN)
        return
      end

      if direction == "in" then
        defaultCallHierachyIncoming(err, result)
      elseif direction == "out" then
        defaultCallHierachyOutgoing(err, result)
      else
        return
      end

      vim.cmd("quit")
      vim.cmd("Trouble quickfix")
    end
  end

  vim.lsp.handlers['callHierarchy/incomingCalls'] = customCallHierachy("in")
  vim.lsp.handlers['callHierarchy/outgoingCalls'] = customCallHierachy("out")
EOF
'''
hook_source = '''
lua << EOF
  require("trouble").setup{
    height = 15,
    padding = false,
    auto_open = false,
    auto_preview = false,
    action_keys = {
      close = "q",
      cancel = "<esc>",
      refresh = "r",
      jump = {"<cr>", "<tab>"},
      open_split = { "<c-s>" },
      open_vsplit = { "<c-v>" },
      open_tab = { "<c-t>" },
      jump_close = {"o"},
      toggle_mode = "m",
      toggle_preview = "P",
      hover = "K",
      preview = "p",
      close_folds = {"zM", "zm"},
      open_folds = {"zR", "zr"},
      toggle_fold = {"zA", "za"},
      previous = "k",
      next = "j"
    },
  }
EOF
'''
